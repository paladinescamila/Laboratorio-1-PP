; ModuleID = 'parallel.c'
source_filename = "parallel.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ident_t = type { i32, i32, i32, i32, i8* }

@.str = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@0 = private unnamed_addr global %struct.ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0) }, align 8
@1 = private unnamed_addr constant [31 x i8] c";parallel.c;Parallel_BS;25;5;;\00", align 1
@2 = private unnamed_addr constant [32 x i8] c";parallel.c;Parallel_BS;25;29;;\00", align 1
@3 = private unnamed_addr global %struct.ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0) }, align 8
@4 = private unnamed_addr constant [31 x i8] c";parallel.c;Parallel_BS;29;5;;\00", align 1
@5 = private unnamed_addr constant [32 x i8] c";parallel.c;Parallel_BS;29;29;;\00", align 1
@6 = private unnamed_addr constant [31 x i8] c";parallel.c;Parallel_BS;33;5;;\00", align 1
@7 = private unnamed_addr constant [32 x i8] c";parallel.c;Parallel_BS;33;29;;\00", align 1
@8 = private unnamed_addr constant [31 x i8] c";parallel.c;Parallel_BS;41;5;;\00", align 1
@9 = private unnamed_addr constant [32 x i8] c";parallel.c;Parallel_BS;44;13;;\00", align 1
@.gomp_critical_user_.var = common global [8 x i32] zeroinitializer
@10 = private unnamed_addr constant [32 x i8] c";parallel.c;Parallel_BS;41;29;;\00", align 1
@11 = private unnamed_addr constant [31 x i8] c";parallel.c;Parallel_BS;48;5;;\00", align 1
@12 = private unnamed_addr constant [32 x i8] c";parallel.c;Parallel_BS;51;13;;\00", align 1
@13 = private unnamed_addr constant [32 x i8] c";parallel.c;Parallel_BS;48;29;;\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"Time: %f\0A\00", align 1

; Function Attrs: nounwind uwtable
define dso_local void @Build_Array(i32* %array, i32 %n) #0 !dbg !13 {
entry:
  %array.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %max = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %array, i32** %array.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %array.addr, metadata !19, metadata !DIExpression()), !dbg !28
  store i32 %n, i32* %n.addr, align 4, !tbaa !29
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !20, metadata !DIExpression()), !dbg !31
  %0 = bitcast i32* %max to i8*, !dbg !32
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #3, !dbg !32
  call void @llvm.dbg.declare(metadata i32* %max, metadata !21, metadata !DIExpression()), !dbg !33
  store i32 1000, i32* %max, align 4, !dbg !33, !tbaa !29
  %1 = bitcast i32* %i to i8*, !dbg !34
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #3, !dbg !34
  call void @llvm.dbg.declare(metadata i32* %i, metadata !22, metadata !DIExpression()), !dbg !35
  store i32 0, i32* %i, align 4, !dbg !35, !tbaa !29
  br label %for.cond, !dbg !34

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !36, !tbaa !29
  %3 = load i32, i32* %n.addr, align 4, !dbg !38, !tbaa !29
  %cmp = icmp slt i32 %2, %3, !dbg !39
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !40

for.cond.cleanup:                                 ; preds = %for.cond
  %4 = bitcast i32* %i to i8*, !dbg !41
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %4) #3, !dbg !41
  br label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %max, align 4, !dbg !42, !tbaa !29
  %6 = load i32*, i32** %array.addr, align 8, !dbg !44, !tbaa !24
  %7 = load i32, i32* %i, align 4, !dbg !45, !tbaa !29
  %idxprom = sext i32 %7 to i64, !dbg !44
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !44
  store i32 %5, i32* %arrayidx, align 4, !dbg !46, !tbaa !29
  %8 = load i32, i32* %max, align 4, !dbg !47, !tbaa !29
  %dec = add nsw i32 %8, -1, !dbg !47
  store i32 %dec, i32* %max, align 4, !dbg !47, !tbaa !29
  br label %for.inc, !dbg !48

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !49, !tbaa !29
  %inc = add nsw i32 %9, 1, !dbg !49
  store i32 %inc, i32* %i, align 4, !dbg !49, !tbaa !29
  br label %for.cond, !dbg !41, !llvm.loop !50

for.end:                                          ; preds = %for.cond.cleanup
  %10 = bitcast i32* %max to i8*, !dbg !52
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %10) #3, !dbg !52
  ret void, !dbg !52
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define dso_local void @Parallel_BS(i32* %array, i32 %n, i32 %max, i32 %min) #0 !dbg !53 {
entry:
  %array.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %max.addr = alloca i32, align 4
  %min.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %saved_stack = alloca i8*, align 8
  %__vla_expr0 = alloca i64, align 8
  %__vla_expr1 = alloca i64, align 8
  %.kmpc_loc.addr = alloca %struct.ident_t, align 8
  %0 = bitcast %struct.ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %struct.ident_t* @3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 %1, i64 24, i1 false)
  store i32* %array, i32** %array.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %array.addr, metadata !57, metadata !DIExpression()), !dbg !74
  store i32 %n, i32* %n.addr, align 4, !tbaa !29
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !58, metadata !DIExpression()), !dbg !75
  store i32 %max, i32* %max.addr, align 4, !tbaa !29
  call void @llvm.dbg.declare(metadata i32* %max.addr, metadata !59, metadata !DIExpression()), !dbg !76
  store i32 %min, i32* %min.addr, align 4, !tbaa !29
  call void @llvm.dbg.declare(metadata i32* %min.addr, metadata !60, metadata !DIExpression()), !dbg !77
  %2 = bitcast i32* %i to i8*, !dbg !78
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #3, !dbg !78
  call void @llvm.dbg.declare(metadata i32* %i, metadata !61, metadata !DIExpression()), !dbg !79
  %3 = bitcast i32* %j to i8*, !dbg !78
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #3, !dbg !78
  call void @llvm.dbg.declare(metadata i32* %j, metadata !62, metadata !DIExpression()), !dbg !80
  store i32 0, i32* %j, align 4, !dbg !80, !tbaa !29
  %4 = load i32, i32* %max.addr, align 4, !dbg !81, !tbaa !29
  %add = add nsw i32 %4, 1, !dbg !82
  %5 = zext i32 %add to i64, !dbg !83
  %6 = call i8* @llvm.stacksave(), !dbg !83
  store i8* %6, i8** %saved_stack, align 8, !dbg !83
  %vla = alloca i32, i64 %5, align 16, !dbg !83
  store i64 %5, i64* %__vla_expr0, align 8, !dbg !83
  call void @llvm.dbg.declare(metadata i64* %__vla_expr0, metadata !63, metadata !DIExpression()), !dbg !84
  call void @llvm.dbg.declare(metadata i32* %vla, metadata !65, metadata !DIExpression()), !dbg !85
  %7 = load i32, i32* %min.addr, align 4, !dbg !86, !tbaa !29
  %sub = sub nsw i32 %7, 1, !dbg !87
  %sub1 = sub nsw i32 0, %sub, !dbg !88
  %8 = zext i32 %sub1 to i64, !dbg !83
  %vla2 = alloca i32, i64 %8, align 16, !dbg !83
  store i64 %8, i64* %__vla_expr1, align 8, !dbg !83
  call void @llvm.dbg.declare(metadata i64* %__vla_expr1, metadata !69, metadata !DIExpression()), !dbg !84
  call void @llvm.dbg.declare(metadata i32* %vla2, metadata !70, metadata !DIExpression()), !dbg !89
  %9 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !90
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @1, i32 0, i32 0), i8** %9, align 8, !dbg !90, !tbaa !91
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* %.kmpc_loc.addr, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i64, i32*)* @.omp_outlined. to void (i32*, i32*, ...)*), i32* %max.addr, i64 %5, i32* %vla), !dbg !90
  %10 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !93
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @4, i32 0, i32 0), i8** %10, align 8, !dbg !93, !tbaa !91
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* %.kmpc_loc.addr, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i64, i32*)* @.omp_outlined..2 to void (i32*, i32*, ...)*), i32* %min.addr, i64 %8, i32* %vla2), !dbg !93
  %11 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !94
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @6, i32 0, i32 0), i8** %11, align 8, !dbg !94, !tbaa !91
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* %.kmpc_loc.addr, i32 6, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32**, i64, i32*, i64, i32*)* @.omp_outlined..4 to void (i32*, i32*, ...)*), i32* %n.addr, i32** %array.addr, i64 %5, i32* %vla, i64 %8, i32* %vla2), !dbg !94
  %12 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !95
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @8, i32 0, i32 0), i8** %12, align 8, !dbg !95, !tbaa !91
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* %.kmpc_loc.addr, i32 5, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i64, i32*, i32**, i32*)* @.omp_outlined..6 to void (i32*, i32*, ...)*), i32* %min.addr, i64 %8, i32* %vla2, i32** %array.addr, i32* %j), !dbg !95
  %13 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !96
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @11, i32 0, i32 0), i8** %13, align 8, !dbg !96, !tbaa !91
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* %.kmpc_loc.addr, i32 5, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i64, i32*, i32**, i32*)* @.omp_outlined..8 to void (i32*, i32*, ...)*), i32* %max.addr, i64 %5, i32* %vla, i32** %array.addr, i32* %j), !dbg !96
  %14 = load i8*, i8** %saved_stack, align 8, !dbg !97
  call void @llvm.stackrestore(i8* %14), !dbg !97
  %15 = bitcast i32* %j to i8*, !dbg !97
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %15) #3, !dbg !97
  %16 = bitcast i32* %i to i8*, !dbg !97
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %16) #3, !dbg !97
  ret void, !dbg !97
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp_outlined._debug__(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %max, i64 %vla, i32* dereferenceable(4) %cpos) #4 !dbg !98 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %max.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %cpos.addr = alloca i32*, align 8
  %.omp.iv = alloca i32, align 4
  %tmp = alloca i32, align 4
  %.capture_expr. = alloca i32, align 4
  %.capture_expr.1 = alloca i32, align 4
  %i = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i3 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %struct.ident_t, align 8
  %0 = bitcast %struct.ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %struct.ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 %1, i64 24, i1 false)
  store i32* %.global_tid., i32** %.global_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !107, metadata !DIExpression()), !dbg !119
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !108, metadata !DIExpression()), !dbg !119
  store i32* %max, i32** %max.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %max.addr, metadata !109, metadata !DIExpression()), !dbg !120
  store i64 %vla, i64* %vla.addr, align 8, !tbaa !121
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !110, metadata !DIExpression()), !dbg !119
  store i32* %cpos, i32** %cpos.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %cpos.addr, metadata !111, metadata !DIExpression()), !dbg !123
  %2 = load i32*, i32** %max.addr, align 8, !dbg !124, !tbaa !24
  %3 = load i64, i64* %vla.addr, align 8, !dbg !124, !tbaa !121
  %4 = load i32*, i32** %cpos.addr, align 8, !dbg !124, !tbaa !24
  %5 = bitcast i32* %.omp.iv to i8*, !dbg !124
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #3, !dbg !124
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !112, metadata !DIExpression()), !dbg !119
  %6 = bitcast i32* %.capture_expr. to i8*, !dbg !124
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #3, !dbg !124
  call void @llvm.dbg.declare(metadata i32* %.capture_expr., metadata !113, metadata !DIExpression()), !dbg !119
  %7 = load i32, i32* %2, align 4, !dbg !125, !tbaa !29
  store i32 %7, i32* %.capture_expr., align 4, !dbg !125, !tbaa !29
  %8 = bitcast i32* %.capture_expr.1 to i8*, !dbg !124
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #3, !dbg !124
  call void @llvm.dbg.declare(metadata i32* %.capture_expr.1, metadata !113, metadata !DIExpression()), !dbg !119
  %9 = load i32, i32* %.capture_expr., align 4, !dbg !125, !tbaa !29
  %sub = sub nsw i32 %9, 0, !dbg !124
  %add = add nsw i32 %sub, 1, !dbg !124
  %div = sdiv i32 %add, 1, !dbg !124
  %sub2 = sub nsw i32 %div, 1, !dbg !124
  store i32 %sub2, i32* %.capture_expr.1, align 4, !dbg !124, !tbaa !29
  %10 = bitcast i32* %i to i8*, !dbg !124
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #3, !dbg !124
  call void @llvm.dbg.declare(metadata i32* %i, metadata !114, metadata !DIExpression()), !dbg !119
  store i32 0, i32* %i, align 4, !dbg !126, !tbaa !29
  %11 = bitcast i32* %i to i8*, !dbg !124
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11) #3, !dbg !124
  %12 = load i32, i32* %.capture_expr., align 4, !dbg !125, !tbaa !29
  %cmp = icmp sle i32 0, %12, !dbg !124
  br i1 %cmp, label %omp.precond.then, label %omp.precond.end, !dbg !124

omp.precond.then:                                 ; preds = %entry
  %13 = bitcast i32* %.omp.lb to i8*, !dbg !124
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %13) #3, !dbg !124
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !115, metadata !DIExpression()), !dbg !119
  store i32 0, i32* %.omp.lb, align 4, !dbg !127, !tbaa !29
  %14 = bitcast i32* %.omp.ub to i8*, !dbg !124
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %14) #3, !dbg !124
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !116, metadata !DIExpression()), !dbg !119
  %15 = load i32, i32* %.capture_expr.1, align 4, !dbg !124, !tbaa !29
  store i32 %15, i32* %.omp.ub, align 4, !dbg !127, !tbaa !29
  %16 = bitcast i32* %.omp.stride to i8*, !dbg !124
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #3, !dbg !124
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !117, metadata !DIExpression()), !dbg !119
  store i32 1, i32* %.omp.stride, align 4, !dbg !127, !tbaa !29
  %17 = bitcast i32* %.omp.is_last to i8*, !dbg !124
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %17) #3, !dbg !124
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !118, metadata !DIExpression()), !dbg !119
  store i32 0, i32* %.omp.is_last, align 4, !dbg !127, !tbaa !29
  %18 = bitcast i32* %i3 to i8*, !dbg !124
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %18) #3, !dbg !124
  call void @llvm.dbg.declare(metadata i32* %i3, metadata !114, metadata !DIExpression()), !dbg !119
  %19 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !124
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @1, i32 0, i32 0), i8** %19, align 8, !dbg !124, !tbaa !91
  %20 = load i32*, i32** %.global_tid..addr, align 8, !dbg !124
  %21 = load i32, i32* %20, align 4, !dbg !124, !tbaa !29
  call void @__kmpc_for_static_init_4(%struct.ident_t* %.kmpc_loc.addr, i32 %21, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !124
  %22 = load i32, i32* %.omp.ub, align 4, !dbg !127, !tbaa !29
  %23 = load i32, i32* %.capture_expr.1, align 4, !dbg !124, !tbaa !29
  %cmp4 = icmp sgt i32 %22, %23, !dbg !127
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !127

cond.true:                                        ; preds = %omp.precond.then
  %24 = load i32, i32* %.capture_expr.1, align 4, !dbg !124, !tbaa !29
  br label %cond.end, !dbg !127

cond.false:                                       ; preds = %omp.precond.then
  %25 = load i32, i32* %.omp.ub, align 4, !dbg !127, !tbaa !29
  br label %cond.end, !dbg !127

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %24, %cond.true ], [ %25, %cond.false ], !dbg !127
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !127, !tbaa !29
  %26 = load i32, i32* %.omp.lb, align 4, !dbg !127, !tbaa !29
  store i32 %26, i32* %.omp.iv, align 4, !dbg !127, !tbaa !29
  br label %omp.inner.for.cond, !dbg !124

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %27 = load i32, i32* %.omp.iv, align 4, !dbg !127, !tbaa !29
  %28 = load i32, i32* %.omp.ub, align 4, !dbg !127, !tbaa !29
  %cmp5 = icmp sle i32 %27, %28, !dbg !124
  br i1 %cmp5, label %omp.inner.for.body, label %omp.inner.for.cond.cleanup, !dbg !124

omp.inner.for.cond.cleanup:                       ; preds = %omp.inner.for.cond
  br label %omp.inner.for.end, !dbg !124

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %29 = load i32, i32* %.omp.iv, align 4, !dbg !127, !tbaa !29
  %mul = mul nsw i32 %29, 1, !dbg !126
  %add6 = add nsw i32 0, %mul, !dbg !126
  store i32 %add6, i32* %i3, align 4, !dbg !126, !tbaa !29
  %30 = load i32, i32* %i3, align 4, !dbg !128, !tbaa !29
  %idxprom = sext i32 %30 to i64, !dbg !129
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom, !dbg !129
  store i32 0, i32* %arrayidx, align 4, !dbg !130, !tbaa !29
  br label %omp.body.continue, !dbg !129

omp.body.continue:                                ; preds = %omp.inner.for.body
  br label %omp.inner.for.inc, !dbg !131

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %31 = load i32, i32* %.omp.iv, align 4, !dbg !127, !tbaa !29
  %add7 = add nsw i32 %31, 1, !dbg !124
  store i32 %add7, i32* %.omp.iv, align 4, !dbg !124, !tbaa !29
  br label %omp.inner.for.cond, !dbg !131, !llvm.loop !132

omp.inner.for.end:                                ; preds = %omp.inner.for.cond.cleanup
  br label %omp.loop.exit, !dbg !131

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %32 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !131
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @2, i32 0, i32 0), i8** %32, align 8, !dbg !131, !tbaa !91
  %33 = load i32*, i32** %.global_tid..addr, align 8, !dbg !131
  %34 = load i32, i32* %33, align 4, !dbg !131, !tbaa !29
  call void @__kmpc_for_static_fini(%struct.ident_t* %.kmpc_loc.addr, i32 %34), !dbg !131
  %35 = bitcast i32* %i3 to i8*, !dbg !131
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %35) #3, !dbg !131
  %36 = bitcast i32* %.omp.is_last to i8*, !dbg !131
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %36) #3, !dbg !131
  %37 = bitcast i32* %.omp.stride to i8*, !dbg !131
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %37) #3, !dbg !131
  %38 = bitcast i32* %.omp.ub to i8*, !dbg !131
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %38) #3, !dbg !131
  %39 = bitcast i32* %.omp.lb to i8*, !dbg !131
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %39) #3, !dbg !131
  br label %omp.precond.end, !dbg !131

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  %40 = bitcast i32* %.capture_expr.1 to i8*, !dbg !131
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %40) #3, !dbg !131
  %41 = bitcast i32* %.capture_expr. to i8*, !dbg !131
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %41) #3, !dbg !131
  %42 = bitcast i32* %.omp.iv to i8*, !dbg !131
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %42) #3, !dbg !131
  ret void, !dbg !134
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local void @__kmpc_for_static_init_4(%struct.ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32)

declare dso_local void @__kmpc_for_static_fini(%struct.ident_t*, i32)

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp_outlined.(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %max, i64 %vla, i32* dereferenceable(4) %cpos) #4 !dbg !135 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %max.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %cpos.addr = alloca i32*, align 8
  store i32* %.global_tid., i32** %.global_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !137, metadata !DIExpression()), !dbg !142
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !138, metadata !DIExpression()), !dbg !142
  store i32* %max, i32** %max.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %max.addr, metadata !139, metadata !DIExpression()), !dbg !142
  store i64 %vla, i64* %vla.addr, align 8, !tbaa !121
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !140, metadata !DIExpression()), !dbg !142
  store i32* %cpos, i32** %cpos.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %cpos.addr, metadata !141, metadata !DIExpression()), !dbg !142
  %0 = load i32*, i32** %max.addr, align 8, !dbg !143, !tbaa !24
  %1 = load i64, i64* %vla.addr, align 8, !dbg !143, !tbaa !121
  %2 = load i32*, i32** %cpos.addr, align 8, !dbg !143, !tbaa !24
  %3 = load i32*, i32** %.global_tid..addr, align 8, !dbg !143, !tbaa !24
  %4 = load i32*, i32** %.bound_tid..addr, align 8, !dbg !143, !tbaa !24
  %5 = load i32*, i32** %max.addr, align 8, !dbg !143, !tbaa !24
  %6 = load i32*, i32** %cpos.addr, align 8, !dbg !143, !tbaa !24
  call void @.omp_outlined._debug__(i32* %3, i32* %4, i32* %5, i64 %1, i32* %6) #3, !dbg !143
  ret void, !dbg !143
}

declare !callback !144 dso_local void @__kmpc_fork_call(%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...)

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp_outlined._debug__.1(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %min, i64 %vla, i32* dereferenceable(4) %cneg) #4 !dbg !146 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %min.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %cneg.addr = alloca i32*, align 8
  %.omp.iv = alloca i32, align 4
  %tmp = alloca i32, align 4
  %.capture_expr. = alloca i32, align 4
  %.capture_expr.2 = alloca i32, align 4
  %i = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i5 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %struct.ident_t, align 8
  %0 = bitcast %struct.ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %struct.ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 %1, i64 24, i1 false)
  store i32* %.global_tid., i32** %.global_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !148, metadata !DIExpression()), !dbg !160
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !149, metadata !DIExpression()), !dbg !160
  store i32* %min, i32** %min.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %min.addr, metadata !150, metadata !DIExpression()), !dbg !161
  store i64 %vla, i64* %vla.addr, align 8, !tbaa !121
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !151, metadata !DIExpression()), !dbg !160
  store i32* %cneg, i32** %cneg.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %cneg.addr, metadata !152, metadata !DIExpression()), !dbg !162
  %2 = load i32*, i32** %min.addr, align 8, !dbg !163, !tbaa !24
  %3 = load i64, i64* %vla.addr, align 8, !dbg !163, !tbaa !121
  %4 = load i32*, i32** %cneg.addr, align 8, !dbg !163, !tbaa !24
  %5 = bitcast i32* %.omp.iv to i8*, !dbg !163
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #3, !dbg !163
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !153, metadata !DIExpression()), !dbg !160
  %6 = bitcast i32* %.capture_expr. to i8*, !dbg !163
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #3, !dbg !163
  call void @llvm.dbg.declare(metadata i32* %.capture_expr., metadata !154, metadata !DIExpression()), !dbg !160
  %7 = load i32, i32* %2, align 4, !dbg !164, !tbaa !29
  %sub = sub nsw i32 %7, 1, !dbg !165
  %sub1 = sub nsw i32 0, %sub, !dbg !166
  store i32 %sub1, i32* %.capture_expr., align 4, !dbg !166, !tbaa !29
  %8 = bitcast i32* %.capture_expr.2 to i8*, !dbg !163
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #3, !dbg !163
  call void @llvm.dbg.declare(metadata i32* %.capture_expr.2, metadata !154, metadata !DIExpression()), !dbg !160
  %9 = load i32, i32* %.capture_expr., align 4, !dbg !166, !tbaa !29
  %sub3 = sub nsw i32 %9, 0, !dbg !163
  %add = add nsw i32 %sub3, 1, !dbg !163
  %div = sdiv i32 %add, 1, !dbg !163
  %sub4 = sub nsw i32 %div, 1, !dbg !163
  store i32 %sub4, i32* %.capture_expr.2, align 4, !dbg !163, !tbaa !29
  %10 = bitcast i32* %i to i8*, !dbg !163
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #3, !dbg !163
  call void @llvm.dbg.declare(metadata i32* %i, metadata !155, metadata !DIExpression()), !dbg !160
  store i32 0, i32* %i, align 4, !dbg !167, !tbaa !29
  %11 = bitcast i32* %i to i8*, !dbg !163
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11) #3, !dbg !163
  %12 = load i32, i32* %.capture_expr., align 4, !dbg !166, !tbaa !29
  %cmp = icmp sle i32 0, %12, !dbg !163
  br i1 %cmp, label %omp.precond.then, label %omp.precond.end, !dbg !163

omp.precond.then:                                 ; preds = %entry
  %13 = bitcast i32* %.omp.lb to i8*, !dbg !163
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %13) #3, !dbg !163
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !156, metadata !DIExpression()), !dbg !160
  store i32 0, i32* %.omp.lb, align 4, !dbg !168, !tbaa !29
  %14 = bitcast i32* %.omp.ub to i8*, !dbg !163
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %14) #3, !dbg !163
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !157, metadata !DIExpression()), !dbg !160
  %15 = load i32, i32* %.capture_expr.2, align 4, !dbg !163, !tbaa !29
  store i32 %15, i32* %.omp.ub, align 4, !dbg !168, !tbaa !29
  %16 = bitcast i32* %.omp.stride to i8*, !dbg !163
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #3, !dbg !163
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !158, metadata !DIExpression()), !dbg !160
  store i32 1, i32* %.omp.stride, align 4, !dbg !168, !tbaa !29
  %17 = bitcast i32* %.omp.is_last to i8*, !dbg !163
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %17) #3, !dbg !163
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !159, metadata !DIExpression()), !dbg !160
  store i32 0, i32* %.omp.is_last, align 4, !dbg !168, !tbaa !29
  %18 = bitcast i32* %i5 to i8*, !dbg !163
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %18) #3, !dbg !163
  call void @llvm.dbg.declare(metadata i32* %i5, metadata !155, metadata !DIExpression()), !dbg !160
  %19 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !163
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @4, i32 0, i32 0), i8** %19, align 8, !dbg !163, !tbaa !91
  %20 = load i32*, i32** %.global_tid..addr, align 8, !dbg !163
  %21 = load i32, i32* %20, align 4, !dbg !163, !tbaa !29
  call void @__kmpc_for_static_init_4(%struct.ident_t* %.kmpc_loc.addr, i32 %21, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !163
  %22 = load i32, i32* %.omp.ub, align 4, !dbg !168, !tbaa !29
  %23 = load i32, i32* %.capture_expr.2, align 4, !dbg !163, !tbaa !29
  %cmp6 = icmp sgt i32 %22, %23, !dbg !168
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !168

cond.true:                                        ; preds = %omp.precond.then
  %24 = load i32, i32* %.capture_expr.2, align 4, !dbg !163, !tbaa !29
  br label %cond.end, !dbg !168

cond.false:                                       ; preds = %omp.precond.then
  %25 = load i32, i32* %.omp.ub, align 4, !dbg !168, !tbaa !29
  br label %cond.end, !dbg !168

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %24, %cond.true ], [ %25, %cond.false ], !dbg !168
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !168, !tbaa !29
  %26 = load i32, i32* %.omp.lb, align 4, !dbg !168, !tbaa !29
  store i32 %26, i32* %.omp.iv, align 4, !dbg !168, !tbaa !29
  br label %omp.inner.for.cond, !dbg !163

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %27 = load i32, i32* %.omp.iv, align 4, !dbg !168, !tbaa !29
  %28 = load i32, i32* %.omp.ub, align 4, !dbg !168, !tbaa !29
  %cmp7 = icmp sle i32 %27, %28, !dbg !163
  br i1 %cmp7, label %omp.inner.for.body, label %omp.inner.for.cond.cleanup, !dbg !163

omp.inner.for.cond.cleanup:                       ; preds = %omp.inner.for.cond
  br label %omp.inner.for.end, !dbg !163

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %29 = load i32, i32* %.omp.iv, align 4, !dbg !168, !tbaa !29
  %mul = mul nsw i32 %29, 1, !dbg !167
  %add8 = add nsw i32 0, %mul, !dbg !167
  store i32 %add8, i32* %i5, align 4, !dbg !167, !tbaa !29
  %30 = load i32, i32* %i5, align 4, !dbg !169, !tbaa !29
  %idxprom = sext i32 %30 to i64, !dbg !170
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom, !dbg !170
  store i32 0, i32* %arrayidx, align 4, !dbg !171, !tbaa !29
  br label %omp.body.continue, !dbg !170

omp.body.continue:                                ; preds = %omp.inner.for.body
  br label %omp.inner.for.inc, !dbg !172

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %31 = load i32, i32* %.omp.iv, align 4, !dbg !168, !tbaa !29
  %add9 = add nsw i32 %31, 1, !dbg !163
  store i32 %add9, i32* %.omp.iv, align 4, !dbg !163, !tbaa !29
  br label %omp.inner.for.cond, !dbg !172, !llvm.loop !173

omp.inner.for.end:                                ; preds = %omp.inner.for.cond.cleanup
  br label %omp.loop.exit, !dbg !172

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %32 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !172
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @5, i32 0, i32 0), i8** %32, align 8, !dbg !172, !tbaa !91
  %33 = load i32*, i32** %.global_tid..addr, align 8, !dbg !172
  %34 = load i32, i32* %33, align 4, !dbg !172, !tbaa !29
  call void @__kmpc_for_static_fini(%struct.ident_t* %.kmpc_loc.addr, i32 %34), !dbg !172
  %35 = bitcast i32* %i5 to i8*, !dbg !172
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %35) #3, !dbg !172
  %36 = bitcast i32* %.omp.is_last to i8*, !dbg !172
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %36) #3, !dbg !172
  %37 = bitcast i32* %.omp.stride to i8*, !dbg !172
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %37) #3, !dbg !172
  %38 = bitcast i32* %.omp.ub to i8*, !dbg !172
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %38) #3, !dbg !172
  %39 = bitcast i32* %.omp.lb to i8*, !dbg !172
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %39) #3, !dbg !172
  br label %omp.precond.end, !dbg !172

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  %40 = bitcast i32* %.capture_expr.2 to i8*, !dbg !172
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %40) #3, !dbg !172
  %41 = bitcast i32* %.capture_expr. to i8*, !dbg !172
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %41) #3, !dbg !172
  %42 = bitcast i32* %.omp.iv to i8*, !dbg !172
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %42) #3, !dbg !172
  ret void, !dbg !175
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp_outlined..2(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %min, i64 %vla, i32* dereferenceable(4) %cneg) #4 !dbg !176 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %min.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %cneg.addr = alloca i32*, align 8
  store i32* %.global_tid., i32** %.global_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !178, metadata !DIExpression()), !dbg !183
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !179, metadata !DIExpression()), !dbg !183
  store i32* %min, i32** %min.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %min.addr, metadata !180, metadata !DIExpression()), !dbg !183
  store i64 %vla, i64* %vla.addr, align 8, !tbaa !121
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !181, metadata !DIExpression()), !dbg !183
  store i32* %cneg, i32** %cneg.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %cneg.addr, metadata !182, metadata !DIExpression()), !dbg !183
  %0 = load i32*, i32** %min.addr, align 8, !dbg !184, !tbaa !24
  %1 = load i64, i64* %vla.addr, align 8, !dbg !184, !tbaa !121
  %2 = load i32*, i32** %cneg.addr, align 8, !dbg !184, !tbaa !24
  %3 = load i32*, i32** %.global_tid..addr, align 8, !dbg !184, !tbaa !24
  %4 = load i32*, i32** %.bound_tid..addr, align 8, !dbg !184, !tbaa !24
  %5 = load i32*, i32** %min.addr, align 8, !dbg !184, !tbaa !24
  %6 = load i32*, i32** %cneg.addr, align 8, !dbg !184, !tbaa !24
  call void @.omp_outlined._debug__.1(i32* %3, i32* %4, i32* %5, i64 %1, i32* %6) #3, !dbg !184
  ret void, !dbg !184
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp_outlined._debug__.3(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %n, i32** dereferenceable(8) %array, i64 %vla, i32* dereferenceable(4) %cpos, i64 %vla1, i32* dereferenceable(4) %cneg) #4 !dbg !185 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %n.addr = alloca i32*, align 8
  %array.addr = alloca i32**, align 8
  %vla.addr = alloca i64, align 8
  %cpos.addr = alloca i32*, align 8
  %vla.addr2 = alloca i64, align 8
  %cneg.addr = alloca i32*, align 8
  %.omp.iv = alloca i32, align 4
  %tmp = alloca i32, align 4
  %.capture_expr. = alloca i32, align 4
  %.capture_expr.3 = alloca i32, align 4
  %i = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i6 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %struct.ident_t, align 8
  %0 = bitcast %struct.ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %struct.ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 %1, i64 24, i1 false)
  store i32* %.global_tid., i32** %.global_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !190, metadata !DIExpression()), !dbg !205
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !191, metadata !DIExpression()), !dbg !205
  store i32* %n, i32** %n.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %n.addr, metadata !192, metadata !DIExpression()), !dbg !206
  store i32** %array, i32*** %array.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32*** %array.addr, metadata !193, metadata !DIExpression()), !dbg !207
  store i64 %vla, i64* %vla.addr, align 8, !tbaa !121
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !194, metadata !DIExpression()), !dbg !205
  store i32* %cpos, i32** %cpos.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %cpos.addr, metadata !195, metadata !DIExpression()), !dbg !208
  store i64 %vla1, i64* %vla.addr2, align 8, !tbaa !121
  call void @llvm.dbg.declare(metadata i64* %vla.addr2, metadata !196, metadata !DIExpression()), !dbg !205
  store i32* %cneg, i32** %cneg.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %cneg.addr, metadata !197, metadata !DIExpression()), !dbg !209
  %2 = load i32*, i32** %n.addr, align 8, !dbg !210, !tbaa !24
  %3 = load i32**, i32*** %array.addr, align 8, !dbg !210, !tbaa !24
  %4 = load i64, i64* %vla.addr, align 8, !dbg !210, !tbaa !121
  %5 = load i32*, i32** %cpos.addr, align 8, !dbg !210, !tbaa !24
  %6 = load i64, i64* %vla.addr2, align 8, !dbg !210, !tbaa !121
  %7 = load i32*, i32** %cneg.addr, align 8, !dbg !210, !tbaa !24
  %8 = bitcast i32* %.omp.iv to i8*, !dbg !210
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #3, !dbg !210
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !198, metadata !DIExpression()), !dbg !205
  %9 = bitcast i32* %.capture_expr. to i8*, !dbg !210
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #3, !dbg !210
  call void @llvm.dbg.declare(metadata i32* %.capture_expr., metadata !199, metadata !DIExpression()), !dbg !205
  %10 = load i32, i32* %2, align 4, !dbg !211, !tbaa !29
  store i32 %10, i32* %.capture_expr., align 4, !dbg !211, !tbaa !29
  %11 = bitcast i32* %.capture_expr.3 to i8*, !dbg !210
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %11) #3, !dbg !210
  call void @llvm.dbg.declare(metadata i32* %.capture_expr.3, metadata !199, metadata !DIExpression()), !dbg !205
  %12 = load i32, i32* %.capture_expr., align 4, !dbg !211, !tbaa !29
  %sub = sub nsw i32 %12, 0, !dbg !210
  %sub4 = sub nsw i32 %sub, 1, !dbg !210
  %add = add nsw i32 %sub4, 1, !dbg !210
  %div = sdiv i32 %add, 1, !dbg !210
  %sub5 = sub nsw i32 %div, 1, !dbg !210
  store i32 %sub5, i32* %.capture_expr.3, align 4, !dbg !210, !tbaa !29
  %13 = bitcast i32* %i to i8*, !dbg !210
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %13) #3, !dbg !210
  call void @llvm.dbg.declare(metadata i32* %i, metadata !200, metadata !DIExpression()), !dbg !205
  store i32 0, i32* %i, align 4, !dbg !212, !tbaa !29
  %14 = bitcast i32* %i to i8*, !dbg !210
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #3, !dbg !210
  %15 = load i32, i32* %.capture_expr., align 4, !dbg !211, !tbaa !29
  %cmp = icmp slt i32 0, %15, !dbg !210
  br i1 %cmp, label %omp.precond.then, label %omp.precond.end, !dbg !210

omp.precond.then:                                 ; preds = %entry
  %16 = bitcast i32* %.omp.lb to i8*, !dbg !210
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #3, !dbg !210
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !201, metadata !DIExpression()), !dbg !205
  store i32 0, i32* %.omp.lb, align 4, !dbg !213, !tbaa !29
  %17 = bitcast i32* %.omp.ub to i8*, !dbg !210
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %17) #3, !dbg !210
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !202, metadata !DIExpression()), !dbg !205
  %18 = load i32, i32* %.capture_expr.3, align 4, !dbg !210, !tbaa !29
  store i32 %18, i32* %.omp.ub, align 4, !dbg !213, !tbaa !29
  %19 = bitcast i32* %.omp.stride to i8*, !dbg !210
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %19) #3, !dbg !210
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !203, metadata !DIExpression()), !dbg !205
  store i32 1, i32* %.omp.stride, align 4, !dbg !213, !tbaa !29
  %20 = bitcast i32* %.omp.is_last to i8*, !dbg !210
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %20) #3, !dbg !210
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !204, metadata !DIExpression()), !dbg !205
  store i32 0, i32* %.omp.is_last, align 4, !dbg !213, !tbaa !29
  %21 = bitcast i32* %i6 to i8*, !dbg !210
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21) #3, !dbg !210
  call void @llvm.dbg.declare(metadata i32* %i6, metadata !200, metadata !DIExpression()), !dbg !205
  %22 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !210
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @6, i32 0, i32 0), i8** %22, align 8, !dbg !210, !tbaa !91
  %23 = load i32*, i32** %.global_tid..addr, align 8, !dbg !210
  %24 = load i32, i32* %23, align 4, !dbg !210, !tbaa !29
  call void @__kmpc_for_static_init_4(%struct.ident_t* %.kmpc_loc.addr, i32 %24, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !210
  %25 = load i32, i32* %.omp.ub, align 4, !dbg !213, !tbaa !29
  %26 = load i32, i32* %.capture_expr.3, align 4, !dbg !210, !tbaa !29
  %cmp7 = icmp sgt i32 %25, %26, !dbg !213
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !213

cond.true:                                        ; preds = %omp.precond.then
  %27 = load i32, i32* %.capture_expr.3, align 4, !dbg !210, !tbaa !29
  br label %cond.end, !dbg !213

cond.false:                                       ; preds = %omp.precond.then
  %28 = load i32, i32* %.omp.ub, align 4, !dbg !213, !tbaa !29
  br label %cond.end, !dbg !213

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %27, %cond.true ], [ %28, %cond.false ], !dbg !213
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !213, !tbaa !29
  %29 = load i32, i32* %.omp.lb, align 4, !dbg !213, !tbaa !29
  store i32 %29, i32* %.omp.iv, align 4, !dbg !213, !tbaa !29
  br label %omp.inner.for.cond, !dbg !210

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %30 = load i32, i32* %.omp.iv, align 4, !dbg !213, !tbaa !29
  %31 = load i32, i32* %.omp.ub, align 4, !dbg !213, !tbaa !29
  %cmp8 = icmp sle i32 %30, %31, !dbg !210
  br i1 %cmp8, label %omp.inner.for.body, label %omp.inner.for.cond.cleanup, !dbg !210

omp.inner.for.cond.cleanup:                       ; preds = %omp.inner.for.cond
  br label %omp.inner.for.end, !dbg !210

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %32 = load i32, i32* %.omp.iv, align 4, !dbg !213, !tbaa !29
  %mul = mul nsw i32 %32, 1, !dbg !212
  %add9 = add nsw i32 0, %mul, !dbg !212
  store i32 %add9, i32* %i6, align 4, !dbg !212, !tbaa !29
  %33 = load i32*, i32** %3, align 8, !dbg !214, !tbaa !24
  %34 = load i32, i32* %i6, align 4, !dbg !217, !tbaa !29
  %idxprom = sext i32 %34 to i64, !dbg !214
  %arrayidx = getelementptr inbounds i32, i32* %33, i64 %idxprom, !dbg !214
  %35 = load i32, i32* %arrayidx, align 4, !dbg !214, !tbaa !29
  %cmp10 = icmp sge i32 %35, 0, !dbg !218
  br i1 %cmp10, label %if.then, label %if.else, !dbg !219

if.then:                                          ; preds = %omp.inner.for.body
  %36 = load i32*, i32** %3, align 8, !dbg !220, !tbaa !24
  %37 = load i32, i32* %i6, align 4, !dbg !221, !tbaa !29
  %idxprom11 = sext i32 %37 to i64, !dbg !220
  %arrayidx12 = getelementptr inbounds i32, i32* %36, i64 %idxprom11, !dbg !220
  %38 = load i32, i32* %arrayidx12, align 4, !dbg !220, !tbaa !29
  %idxprom13 = sext i32 %38 to i64, !dbg !222
  %arrayidx14 = getelementptr inbounds i32, i32* %5, i64 %idxprom13, !dbg !222
  %39 = load i32, i32* %arrayidx14, align 4, !dbg !223, !tbaa !29
  %inc = add nsw i32 %39, 1, !dbg !223
  store i32 %inc, i32* %arrayidx14, align 4, !dbg !223, !tbaa !29
  br label %if.end, !dbg !224

if.else:                                          ; preds = %omp.inner.for.body
  %40 = load i32*, i32** %3, align 8, !dbg !225, !tbaa !24
  %41 = load i32, i32* %i6, align 4, !dbg !226, !tbaa !29
  %idxprom15 = sext i32 %41 to i64, !dbg !225
  %arrayidx16 = getelementptr inbounds i32, i32* %40, i64 %idxprom15, !dbg !225
  %42 = load i32, i32* %arrayidx16, align 4, !dbg !225, !tbaa !29
  %sub17 = sub nsw i32 0, %42, !dbg !227
  %idxprom18 = sext i32 %sub17 to i64, !dbg !228
  %arrayidx19 = getelementptr inbounds i32, i32* %7, i64 %idxprom18, !dbg !228
  %43 = load i32, i32* %arrayidx19, align 4, !dbg !229, !tbaa !29
  %inc20 = add nsw i32 %43, 1, !dbg !229
  store i32 %inc20, i32* %arrayidx19, align 4, !dbg !229, !tbaa !29
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %omp.body.continue, !dbg !230

omp.body.continue:                                ; preds = %if.end
  br label %omp.inner.for.inc, !dbg !231

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %44 = load i32, i32* %.omp.iv, align 4, !dbg !213, !tbaa !29
  %add21 = add nsw i32 %44, 1, !dbg !210
  store i32 %add21, i32* %.omp.iv, align 4, !dbg !210, !tbaa !29
  br label %omp.inner.for.cond, !dbg !231, !llvm.loop !232

omp.inner.for.end:                                ; preds = %omp.inner.for.cond.cleanup
  br label %omp.loop.exit, !dbg !231

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %45 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !231
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @7, i32 0, i32 0), i8** %45, align 8, !dbg !231, !tbaa !91
  %46 = load i32*, i32** %.global_tid..addr, align 8, !dbg !231
  %47 = load i32, i32* %46, align 4, !dbg !231, !tbaa !29
  call void @__kmpc_for_static_fini(%struct.ident_t* %.kmpc_loc.addr, i32 %47), !dbg !231
  %48 = bitcast i32* %i6 to i8*, !dbg !231
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %48) #3, !dbg !231
  %49 = bitcast i32* %.omp.is_last to i8*, !dbg !231
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %49) #3, !dbg !231
  %50 = bitcast i32* %.omp.stride to i8*, !dbg !231
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %50) #3, !dbg !231
  %51 = bitcast i32* %.omp.ub to i8*, !dbg !231
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %51) #3, !dbg !231
  %52 = bitcast i32* %.omp.lb to i8*, !dbg !231
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %52) #3, !dbg !231
  br label %omp.precond.end, !dbg !231

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  %53 = bitcast i32* %.capture_expr.3 to i8*, !dbg !231
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %53) #3, !dbg !231
  %54 = bitcast i32* %.capture_expr. to i8*, !dbg !231
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %54) #3, !dbg !231
  %55 = bitcast i32* %.omp.iv to i8*, !dbg !231
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %55) #3, !dbg !231
  ret void, !dbg !234
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp_outlined..4(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %n, i32** dereferenceable(8) %array, i64 %vla, i32* dereferenceable(4) %cpos, i64 %vla1, i32* dereferenceable(4) %cneg) #4 !dbg !235 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %n.addr = alloca i32*, align 8
  %array.addr = alloca i32**, align 8
  %vla.addr = alloca i64, align 8
  %cpos.addr = alloca i32*, align 8
  %vla.addr2 = alloca i64, align 8
  %cneg.addr = alloca i32*, align 8
  store i32* %.global_tid., i32** %.global_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !237, metadata !DIExpression()), !dbg !245
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !238, metadata !DIExpression()), !dbg !245
  store i32* %n, i32** %n.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %n.addr, metadata !239, metadata !DIExpression()), !dbg !245
  store i32** %array, i32*** %array.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32*** %array.addr, metadata !240, metadata !DIExpression()), !dbg !245
  store i64 %vla, i64* %vla.addr, align 8, !tbaa !121
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !241, metadata !DIExpression()), !dbg !245
  store i32* %cpos, i32** %cpos.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %cpos.addr, metadata !242, metadata !DIExpression()), !dbg !245
  store i64 %vla1, i64* %vla.addr2, align 8, !tbaa !121
  call void @llvm.dbg.declare(metadata i64* %vla.addr2, metadata !243, metadata !DIExpression()), !dbg !245
  store i32* %cneg, i32** %cneg.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %cneg.addr, metadata !244, metadata !DIExpression()), !dbg !245
  %0 = load i32*, i32** %n.addr, align 8, !dbg !246, !tbaa !24
  %1 = load i32**, i32*** %array.addr, align 8, !dbg !246, !tbaa !24
  %2 = load i64, i64* %vla.addr, align 8, !dbg !246, !tbaa !121
  %3 = load i32*, i32** %cpos.addr, align 8, !dbg !246, !tbaa !24
  %4 = load i64, i64* %vla.addr2, align 8, !dbg !246, !tbaa !121
  %5 = load i32*, i32** %cneg.addr, align 8, !dbg !246, !tbaa !24
  %6 = load i32*, i32** %.global_tid..addr, align 8, !dbg !246, !tbaa !24
  %7 = load i32*, i32** %.bound_tid..addr, align 8, !dbg !246, !tbaa !24
  %8 = load i32*, i32** %n.addr, align 8, !dbg !246, !tbaa !24
  %9 = load i32**, i32*** %array.addr, align 8, !dbg !246, !tbaa !24
  %10 = load i32*, i32** %cpos.addr, align 8, !dbg !246, !tbaa !24
  %11 = load i32*, i32** %cneg.addr, align 8, !dbg !246, !tbaa !24
  call void @.omp_outlined._debug__.3(i32* %6, i32* %7, i32* %8, i32** %9, i64 %2, i32* %10, i64 %4, i32* %11) #3, !dbg !246
  ret void, !dbg !246
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp_outlined._debug__.5(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %min, i64 %vla, i32* dereferenceable(4) %cneg, i32** dereferenceable(8) %array, i32* dereferenceable(4) %j) #4 !dbg !247 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %min.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %cneg.addr = alloca i32*, align 8
  %array.addr = alloca i32**, align 8
  %j.addr = alloca i32*, align 8
  %.omp.iv = alloca i32, align 4
  %tmp = alloca i32, align 4
  %.capture_expr. = alloca i32, align 4
  %.capture_expr.1 = alloca i32, align 4
  %i = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i5 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %struct.ident_t, align 8
  %0 = bitcast %struct.ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %struct.ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 %1, i64 24, i1 false)
  store i32* %.global_tid., i32** %.global_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !251, metadata !DIExpression()), !dbg !265
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !252, metadata !DIExpression()), !dbg !265
  store i32* %min, i32** %min.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %min.addr, metadata !253, metadata !DIExpression()), !dbg !266
  store i64 %vla, i64* %vla.addr, align 8, !tbaa !121
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !254, metadata !DIExpression()), !dbg !265
  store i32* %cneg, i32** %cneg.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %cneg.addr, metadata !255, metadata !DIExpression()), !dbg !267
  store i32** %array, i32*** %array.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32*** %array.addr, metadata !256, metadata !DIExpression()), !dbg !268
  store i32* %j, i32** %j.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %j.addr, metadata !257, metadata !DIExpression()), !dbg !269
  %2 = load i32*, i32** %min.addr, align 8, !dbg !270, !tbaa !24
  %3 = load i64, i64* %vla.addr, align 8, !dbg !270, !tbaa !121
  %4 = load i32*, i32** %cneg.addr, align 8, !dbg !270, !tbaa !24
  %5 = load i32**, i32*** %array.addr, align 8, !dbg !270, !tbaa !24
  %6 = load i32*, i32** %j.addr, align 8, !dbg !270, !tbaa !24
  %7 = bitcast i32* %.omp.iv to i8*, !dbg !270
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #3, !dbg !270
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !258, metadata !DIExpression()), !dbg !265
  %8 = bitcast i32* %.capture_expr. to i8*, !dbg !270
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #3, !dbg !270
  call void @llvm.dbg.declare(metadata i32* %.capture_expr., metadata !259, metadata !DIExpression()), !dbg !265
  %9 = load i32, i32* %2, align 4, !dbg !271, !tbaa !29
  %sub = sub nsw i32 0, %9, !dbg !272
  store i32 %sub, i32* %.capture_expr., align 4, !dbg !272, !tbaa !29
  %10 = bitcast i32* %.capture_expr.1 to i8*, !dbg !270
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #3, !dbg !270
  call void @llvm.dbg.declare(metadata i32* %.capture_expr.1, metadata !259, metadata !DIExpression()), !dbg !265
  %11 = load i32, i32* %.capture_expr., align 4, !dbg !272, !tbaa !29
  %sub2 = sub nsw i32 %11, 0, !dbg !270
  %sub3 = sub nsw i32 %sub2, 1, !dbg !270
  %add = add nsw i32 %sub3, 1, !dbg !270
  %div = sdiv i32 %add, 1, !dbg !270
  %sub4 = sub nsw i32 %div, 1, !dbg !270
  store i32 %sub4, i32* %.capture_expr.1, align 4, !dbg !270, !tbaa !29
  %12 = bitcast i32* %i to i8*, !dbg !270
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #3, !dbg !270
  call void @llvm.dbg.declare(metadata i32* %i, metadata !260, metadata !DIExpression()), !dbg !265
  %13 = load i32, i32* %.capture_expr., align 4, !dbg !272, !tbaa !29
  store i32 %13, i32* %i, align 4, !dbg !273, !tbaa !29
  %14 = bitcast i32* %i to i8*, !dbg !270
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #3, !dbg !270
  %15 = load i32, i32* %.capture_expr., align 4, !dbg !272, !tbaa !29
  %cmp = icmp sgt i32 %15, 0, !dbg !270
  br i1 %cmp, label %omp.precond.then, label %omp.precond.end, !dbg !270

omp.precond.then:                                 ; preds = %entry
  %16 = bitcast i32* %.omp.lb to i8*, !dbg !270
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #3, !dbg !270
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !261, metadata !DIExpression()), !dbg !265
  store i32 0, i32* %.omp.lb, align 4, !dbg !274, !tbaa !29
  %17 = bitcast i32* %.omp.ub to i8*, !dbg !270
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %17) #3, !dbg !270
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !262, metadata !DIExpression()), !dbg !265
  %18 = load i32, i32* %.capture_expr.1, align 4, !dbg !270, !tbaa !29
  store i32 %18, i32* %.omp.ub, align 4, !dbg !274, !tbaa !29
  %19 = bitcast i32* %.omp.stride to i8*, !dbg !270
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %19) #3, !dbg !270
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !263, metadata !DIExpression()), !dbg !265
  store i32 1, i32* %.omp.stride, align 4, !dbg !274, !tbaa !29
  %20 = bitcast i32* %.omp.is_last to i8*, !dbg !270
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %20) #3, !dbg !270
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !264, metadata !DIExpression()), !dbg !265
  store i32 0, i32* %.omp.is_last, align 4, !dbg !274, !tbaa !29
  %21 = bitcast i32* %i5 to i8*, !dbg !270
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21) #3, !dbg !270
  call void @llvm.dbg.declare(metadata i32* %i5, metadata !260, metadata !DIExpression()), !dbg !265
  %22 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !270
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @8, i32 0, i32 0), i8** %22, align 8, !dbg !270, !tbaa !91
  %23 = load i32*, i32** %.global_tid..addr, align 8, !dbg !270
  %24 = load i32, i32* %23, align 4, !dbg !270, !tbaa !29
  call void @__kmpc_for_static_init_4(%struct.ident_t* %.kmpc_loc.addr, i32 %24, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !270
  %25 = load i32, i32* %.omp.ub, align 4, !dbg !274, !tbaa !29
  %26 = load i32, i32* %.capture_expr.1, align 4, !dbg !270, !tbaa !29
  %cmp6 = icmp sgt i32 %25, %26, !dbg !274
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !274

cond.true:                                        ; preds = %omp.precond.then
  %27 = load i32, i32* %.capture_expr.1, align 4, !dbg !270, !tbaa !29
  br label %cond.end, !dbg !274

cond.false:                                       ; preds = %omp.precond.then
  %28 = load i32, i32* %.omp.ub, align 4, !dbg !274, !tbaa !29
  br label %cond.end, !dbg !274

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %27, %cond.true ], [ %28, %cond.false ], !dbg !274
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !274, !tbaa !29
  %29 = load i32, i32* %.omp.lb, align 4, !dbg !274, !tbaa !29
  store i32 %29, i32* %.omp.iv, align 4, !dbg !274, !tbaa !29
  br label %omp.inner.for.cond, !dbg !270

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %30 = load i32, i32* %.omp.iv, align 4, !dbg !274, !tbaa !29
  %31 = load i32, i32* %.omp.ub, align 4, !dbg !274, !tbaa !29
  %cmp7 = icmp sle i32 %30, %31, !dbg !270
  br i1 %cmp7, label %omp.inner.for.body, label %omp.inner.for.cond.cleanup, !dbg !270

omp.inner.for.cond.cleanup:                       ; preds = %omp.inner.for.cond
  br label %omp.inner.for.end, !dbg !270

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %32 = load i32, i32* %.capture_expr., align 4, !dbg !272, !tbaa !29
  %33 = load i32, i32* %.omp.iv, align 4, !dbg !274, !tbaa !29
  %mul = mul nsw i32 %33, 1, !dbg !273
  %sub8 = sub nsw i32 %32, %mul, !dbg !273
  store i32 %sub8, i32* %i5, align 4, !dbg !273, !tbaa !29
  br label %for.cond, !dbg !275

for.cond:                                         ; preds = %for.inc, %omp.inner.for.body
  %34 = load i32, i32* %i5, align 4, !dbg !276, !tbaa !29
  %idxprom = sext i32 %34 to i64, !dbg !279
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom, !dbg !279
  %35 = load i32, i32* %arrayidx, align 4, !dbg !279, !tbaa !29
  %cmp9 = icmp sgt i32 %35, 0, !dbg !280
  br i1 %cmp9, label %for.body, label %for.end, !dbg !281

for.body:                                         ; preds = %for.cond
  %36 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !282
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @9, i32 0, i32 0), i8** %36, align 8, !dbg !282, !tbaa !91
  %37 = load i32*, i32** %.global_tid..addr, align 8, !dbg !282
  %38 = load i32, i32* %37, align 4, !dbg !282, !tbaa !29
  call void @__kmpc_critical(%struct.ident_t* %.kmpc_loc.addr, i32 %38, [8 x i32]* @.gomp_critical_user_.var), !dbg !282
  %39 = load i32, i32* %i5, align 4, !dbg !284, !tbaa !29
  %sub10 = sub nsw i32 0, %39, !dbg !286
  %40 = load i32*, i32** %5, align 8, !dbg !287, !tbaa !24
  %41 = load i32, i32* %6, align 4, !dbg !288, !tbaa !29
  %inc = add nsw i32 %41, 1, !dbg !288
  store i32 %inc, i32* %6, align 4, !dbg !288, !tbaa !29
  %idxprom11 = sext i32 %41 to i64, !dbg !287
  %arrayidx12 = getelementptr inbounds i32, i32* %40, i64 %idxprom11, !dbg !287
  store i32 %sub10, i32* %arrayidx12, align 4, !dbg !289, !tbaa !29
  call void @__kmpc_end_critical(%struct.ident_t* %.kmpc_loc.addr, i32 %38, [8 x i32]* @.gomp_critical_user_.var), !dbg !287
  br label %for.inc, !dbg !290

for.inc:                                          ; preds = %for.body
  %42 = load i32, i32* %i5, align 4, !dbg !291, !tbaa !29
  %idxprom13 = sext i32 %42 to i64, !dbg !292
  %arrayidx14 = getelementptr inbounds i32, i32* %4, i64 %idxprom13, !dbg !292
  %43 = load i32, i32* %arrayidx14, align 4, !dbg !293, !tbaa !29
  %dec = add nsw i32 %43, -1, !dbg !293
  store i32 %dec, i32* %arrayidx14, align 4, !dbg !293, !tbaa !29
  br label %for.cond, !dbg !294, !llvm.loop !295

for.end:                                          ; preds = %for.cond
  br label %omp.body.continue, !dbg !296

omp.body.continue:                                ; preds = %for.end
  br label %omp.inner.for.inc, !dbg !297

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %44 = load i32, i32* %.omp.iv, align 4, !dbg !274, !tbaa !29
  %add15 = add nsw i32 %44, 1, !dbg !270
  store i32 %add15, i32* %.omp.iv, align 4, !dbg !270, !tbaa !29
  br label %omp.inner.for.cond, !dbg !297, !llvm.loop !298

omp.inner.for.end:                                ; preds = %omp.inner.for.cond.cleanup
  br label %omp.loop.exit, !dbg !297

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %45 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !297
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @10, i32 0, i32 0), i8** %45, align 8, !dbg !297, !tbaa !91
  %46 = load i32*, i32** %.global_tid..addr, align 8, !dbg !297
  %47 = load i32, i32* %46, align 4, !dbg !297, !tbaa !29
  call void @__kmpc_for_static_fini(%struct.ident_t* %.kmpc_loc.addr, i32 %47), !dbg !297
  %48 = bitcast i32* %i5 to i8*, !dbg !297
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %48) #3, !dbg !297
  %49 = bitcast i32* %.omp.is_last to i8*, !dbg !297
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %49) #3, !dbg !297
  %50 = bitcast i32* %.omp.stride to i8*, !dbg !297
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %50) #3, !dbg !297
  %51 = bitcast i32* %.omp.ub to i8*, !dbg !297
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %51) #3, !dbg !297
  %52 = bitcast i32* %.omp.lb to i8*, !dbg !297
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %52) #3, !dbg !297
  br label %omp.precond.end, !dbg !297

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  %53 = bitcast i32* %.capture_expr.1 to i8*, !dbg !297
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %53) #3, !dbg !297
  %54 = bitcast i32* %.capture_expr. to i8*, !dbg !297
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %54) #3, !dbg !297
  %55 = bitcast i32* %.omp.iv to i8*, !dbg !297
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %55) #3, !dbg !297
  ret void, !dbg !300
}

declare dso_local void @__kmpc_end_critical(%struct.ident_t*, i32, [8 x i32]*)

declare dso_local void @__kmpc_critical(%struct.ident_t*, i32, [8 x i32]*)

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp_outlined..6(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %min, i64 %vla, i32* dereferenceable(4) %cneg, i32** dereferenceable(8) %array, i32* dereferenceable(4) %j) #4 !dbg !301 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %min.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %cneg.addr = alloca i32*, align 8
  %array.addr = alloca i32**, align 8
  %j.addr = alloca i32*, align 8
  store i32* %.global_tid., i32** %.global_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !303, metadata !DIExpression()), !dbg !310
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !304, metadata !DIExpression()), !dbg !310
  store i32* %min, i32** %min.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %min.addr, metadata !305, metadata !DIExpression()), !dbg !310
  store i64 %vla, i64* %vla.addr, align 8, !tbaa !121
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !306, metadata !DIExpression()), !dbg !310
  store i32* %cneg, i32** %cneg.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %cneg.addr, metadata !307, metadata !DIExpression()), !dbg !310
  store i32** %array, i32*** %array.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32*** %array.addr, metadata !308, metadata !DIExpression()), !dbg !310
  store i32* %j, i32** %j.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %j.addr, metadata !309, metadata !DIExpression()), !dbg !310
  %0 = load i32*, i32** %min.addr, align 8, !dbg !311, !tbaa !24
  %1 = load i64, i64* %vla.addr, align 8, !dbg !311, !tbaa !121
  %2 = load i32*, i32** %cneg.addr, align 8, !dbg !311, !tbaa !24
  %3 = load i32**, i32*** %array.addr, align 8, !dbg !311, !tbaa !24
  %4 = load i32*, i32** %j.addr, align 8, !dbg !311, !tbaa !24
  %5 = load i32*, i32** %.global_tid..addr, align 8, !dbg !311, !tbaa !24
  %6 = load i32*, i32** %.bound_tid..addr, align 8, !dbg !311, !tbaa !24
  %7 = load i32*, i32** %min.addr, align 8, !dbg !311, !tbaa !24
  %8 = load i32*, i32** %cneg.addr, align 8, !dbg !311, !tbaa !24
  %9 = load i32**, i32*** %array.addr, align 8, !dbg !311, !tbaa !24
  %10 = load i32*, i32** %j.addr, align 8, !dbg !311, !tbaa !24
  call void @.omp_outlined._debug__.5(i32* %5, i32* %6, i32* %7, i64 %1, i32* %8, i32** %9, i32* %10) #3, !dbg !311
  ret void, !dbg !311
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp_outlined._debug__.7(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %max, i64 %vla, i32* dereferenceable(4) %cpos, i32** dereferenceable(8) %array, i32* dereferenceable(4) %j) #4 !dbg !312 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %max.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %cpos.addr = alloca i32*, align 8
  %array.addr = alloca i32**, align 8
  %j.addr = alloca i32*, align 8
  %.omp.iv = alloca i32, align 4
  %tmp = alloca i32, align 4
  %.capture_expr. = alloca i32, align 4
  %.capture_expr.1 = alloca i32, align 4
  %i = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i3 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %struct.ident_t, align 8
  %0 = bitcast %struct.ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %struct.ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 %1, i64 24, i1 false)
  store i32* %.global_tid., i32** %.global_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !314, metadata !DIExpression()), !dbg !328
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !315, metadata !DIExpression()), !dbg !328
  store i32* %max, i32** %max.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %max.addr, metadata !316, metadata !DIExpression()), !dbg !329
  store i64 %vla, i64* %vla.addr, align 8, !tbaa !121
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !317, metadata !DIExpression()), !dbg !328
  store i32* %cpos, i32** %cpos.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %cpos.addr, metadata !318, metadata !DIExpression()), !dbg !330
  store i32** %array, i32*** %array.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32*** %array.addr, metadata !319, metadata !DIExpression()), !dbg !331
  store i32* %j, i32** %j.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %j.addr, metadata !320, metadata !DIExpression()), !dbg !332
  %2 = load i32*, i32** %max.addr, align 8, !dbg !333, !tbaa !24
  %3 = load i64, i64* %vla.addr, align 8, !dbg !333, !tbaa !121
  %4 = load i32*, i32** %cpos.addr, align 8, !dbg !333, !tbaa !24
  %5 = load i32**, i32*** %array.addr, align 8, !dbg !333, !tbaa !24
  %6 = load i32*, i32** %j.addr, align 8, !dbg !333, !tbaa !24
  %7 = bitcast i32* %.omp.iv to i8*, !dbg !333
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #3, !dbg !333
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !321, metadata !DIExpression()), !dbg !328
  %8 = bitcast i32* %.capture_expr. to i8*, !dbg !333
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #3, !dbg !333
  call void @llvm.dbg.declare(metadata i32* %.capture_expr., metadata !322, metadata !DIExpression()), !dbg !328
  %9 = load i32, i32* %2, align 4, !dbg !334, !tbaa !29
  store i32 %9, i32* %.capture_expr., align 4, !dbg !334, !tbaa !29
  %10 = bitcast i32* %.capture_expr.1 to i8*, !dbg !333
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #3, !dbg !333
  call void @llvm.dbg.declare(metadata i32* %.capture_expr.1, metadata !322, metadata !DIExpression()), !dbg !328
  %11 = load i32, i32* %.capture_expr., align 4, !dbg !334, !tbaa !29
  %sub = sub nsw i32 %11, 0, !dbg !333
  %add = add nsw i32 %sub, 1, !dbg !333
  %div = sdiv i32 %add, 1, !dbg !333
  %sub2 = sub nsw i32 %div, 1, !dbg !333
  store i32 %sub2, i32* %.capture_expr.1, align 4, !dbg !333, !tbaa !29
  %12 = bitcast i32* %i to i8*, !dbg !333
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #3, !dbg !333
  call void @llvm.dbg.declare(metadata i32* %i, metadata !323, metadata !DIExpression()), !dbg !328
  store i32 0, i32* %i, align 4, !dbg !335, !tbaa !29
  %13 = bitcast i32* %i to i8*, !dbg !333
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %13) #3, !dbg !333
  %14 = load i32, i32* %.capture_expr., align 4, !dbg !334, !tbaa !29
  %cmp = icmp sle i32 0, %14, !dbg !333
  br i1 %cmp, label %omp.precond.then, label %omp.precond.end, !dbg !333

omp.precond.then:                                 ; preds = %entry
  %15 = bitcast i32* %.omp.lb to i8*, !dbg !333
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %15) #3, !dbg !333
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !324, metadata !DIExpression()), !dbg !328
  store i32 0, i32* %.omp.lb, align 4, !dbg !336, !tbaa !29
  %16 = bitcast i32* %.omp.ub to i8*, !dbg !333
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #3, !dbg !333
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !325, metadata !DIExpression()), !dbg !328
  %17 = load i32, i32* %.capture_expr.1, align 4, !dbg !333, !tbaa !29
  store i32 %17, i32* %.omp.ub, align 4, !dbg !336, !tbaa !29
  %18 = bitcast i32* %.omp.stride to i8*, !dbg !333
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %18) #3, !dbg !333
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !326, metadata !DIExpression()), !dbg !328
  store i32 1, i32* %.omp.stride, align 4, !dbg !336, !tbaa !29
  %19 = bitcast i32* %.omp.is_last to i8*, !dbg !333
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %19) #3, !dbg !333
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !327, metadata !DIExpression()), !dbg !328
  store i32 0, i32* %.omp.is_last, align 4, !dbg !336, !tbaa !29
  %20 = bitcast i32* %i3 to i8*, !dbg !333
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %20) #3, !dbg !333
  call void @llvm.dbg.declare(metadata i32* %i3, metadata !323, metadata !DIExpression()), !dbg !328
  %21 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !333
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @11, i32 0, i32 0), i8** %21, align 8, !dbg !333, !tbaa !91
  %22 = load i32*, i32** %.global_tid..addr, align 8, !dbg !333
  %23 = load i32, i32* %22, align 4, !dbg !333, !tbaa !29
  call void @__kmpc_for_static_init_4(%struct.ident_t* %.kmpc_loc.addr, i32 %23, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !333
  %24 = load i32, i32* %.omp.ub, align 4, !dbg !336, !tbaa !29
  %25 = load i32, i32* %.capture_expr.1, align 4, !dbg !333, !tbaa !29
  %cmp4 = icmp sgt i32 %24, %25, !dbg !336
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !336

cond.true:                                        ; preds = %omp.precond.then
  %26 = load i32, i32* %.capture_expr.1, align 4, !dbg !333, !tbaa !29
  br label %cond.end, !dbg !336

cond.false:                                       ; preds = %omp.precond.then
  %27 = load i32, i32* %.omp.ub, align 4, !dbg !336, !tbaa !29
  br label %cond.end, !dbg !336

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %26, %cond.true ], [ %27, %cond.false ], !dbg !336
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !336, !tbaa !29
  %28 = load i32, i32* %.omp.lb, align 4, !dbg !336, !tbaa !29
  store i32 %28, i32* %.omp.iv, align 4, !dbg !336, !tbaa !29
  br label %omp.inner.for.cond, !dbg !333

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %29 = load i32, i32* %.omp.iv, align 4, !dbg !336, !tbaa !29
  %30 = load i32, i32* %.omp.ub, align 4, !dbg !336, !tbaa !29
  %cmp5 = icmp sle i32 %29, %30, !dbg !333
  br i1 %cmp5, label %omp.inner.for.body, label %omp.inner.for.cond.cleanup, !dbg !333

omp.inner.for.cond.cleanup:                       ; preds = %omp.inner.for.cond
  br label %omp.inner.for.end, !dbg !333

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %31 = load i32, i32* %.omp.iv, align 4, !dbg !336, !tbaa !29
  %mul = mul nsw i32 %31, 1, !dbg !335
  %add6 = add nsw i32 0, %mul, !dbg !335
  store i32 %add6, i32* %i3, align 4, !dbg !335, !tbaa !29
  br label %for.cond, !dbg !337

for.cond:                                         ; preds = %for.inc, %omp.inner.for.body
  %32 = load i32, i32* %i3, align 4, !dbg !338, !tbaa !29
  %idxprom = sext i32 %32 to i64, !dbg !341
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom, !dbg !341
  %33 = load i32, i32* %arrayidx, align 4, !dbg !341, !tbaa !29
  %cmp7 = icmp sgt i32 %33, 0, !dbg !342
  br i1 %cmp7, label %for.body, label %for.end, !dbg !343

for.body:                                         ; preds = %for.cond
  %34 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !344
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @12, i32 0, i32 0), i8** %34, align 8, !dbg !344, !tbaa !91
  %35 = load i32*, i32** %.global_tid..addr, align 8, !dbg !344
  %36 = load i32, i32* %35, align 4, !dbg !344, !tbaa !29
  call void @__kmpc_critical(%struct.ident_t* %.kmpc_loc.addr, i32 %36, [8 x i32]* @.gomp_critical_user_.var), !dbg !344
  %37 = load i32, i32* %i3, align 4, !dbg !346, !tbaa !29
  %38 = load i32*, i32** %5, align 8, !dbg !348, !tbaa !24
  %39 = load i32, i32* %6, align 4, !dbg !349, !tbaa !29
  %inc = add nsw i32 %39, 1, !dbg !349
  store i32 %inc, i32* %6, align 4, !dbg !349, !tbaa !29
  %idxprom8 = sext i32 %39 to i64, !dbg !348
  %arrayidx9 = getelementptr inbounds i32, i32* %38, i64 %idxprom8, !dbg !348
  store i32 %37, i32* %arrayidx9, align 4, !dbg !350, !tbaa !29
  call void @__kmpc_end_critical(%struct.ident_t* %.kmpc_loc.addr, i32 %36, [8 x i32]* @.gomp_critical_user_.var), !dbg !348
  br label %for.inc, !dbg !351

for.inc:                                          ; preds = %for.body
  %40 = load i32, i32* %i3, align 4, !dbg !352, !tbaa !29
  %idxprom10 = sext i32 %40 to i64, !dbg !353
  %arrayidx11 = getelementptr inbounds i32, i32* %4, i64 %idxprom10, !dbg !353
  %41 = load i32, i32* %arrayidx11, align 4, !dbg !354, !tbaa !29
  %dec = add nsw i32 %41, -1, !dbg !354
  store i32 %dec, i32* %arrayidx11, align 4, !dbg !354, !tbaa !29
  br label %for.cond, !dbg !355, !llvm.loop !356

for.end:                                          ; preds = %for.cond
  br label %omp.body.continue, !dbg !357

omp.body.continue:                                ; preds = %for.end
  br label %omp.inner.for.inc, !dbg !358

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %42 = load i32, i32* %.omp.iv, align 4, !dbg !336, !tbaa !29
  %add12 = add nsw i32 %42, 1, !dbg !333
  store i32 %add12, i32* %.omp.iv, align 4, !dbg !333, !tbaa !29
  br label %omp.inner.for.cond, !dbg !358, !llvm.loop !359

omp.inner.for.end:                                ; preds = %omp.inner.for.cond.cleanup
  br label %omp.loop.exit, !dbg !358

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %43 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !358
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @13, i32 0, i32 0), i8** %43, align 8, !dbg !358, !tbaa !91
  %44 = load i32*, i32** %.global_tid..addr, align 8, !dbg !358
  %45 = load i32, i32* %44, align 4, !dbg !358, !tbaa !29
  call void @__kmpc_for_static_fini(%struct.ident_t* %.kmpc_loc.addr, i32 %45), !dbg !358
  %46 = bitcast i32* %i3 to i8*, !dbg !358
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %46) #3, !dbg !358
  %47 = bitcast i32* %.omp.is_last to i8*, !dbg !358
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %47) #3, !dbg !358
  %48 = bitcast i32* %.omp.stride to i8*, !dbg !358
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %48) #3, !dbg !358
  %49 = bitcast i32* %.omp.ub to i8*, !dbg !358
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %49) #3, !dbg !358
  %50 = bitcast i32* %.omp.lb to i8*, !dbg !358
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %50) #3, !dbg !358
  br label %omp.precond.end, !dbg !358

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  %51 = bitcast i32* %.capture_expr.1 to i8*, !dbg !358
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %51) #3, !dbg !358
  %52 = bitcast i32* %.capture_expr. to i8*, !dbg !358
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %52) #3, !dbg !358
  %53 = bitcast i32* %.omp.iv to i8*, !dbg !358
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %53) #3, !dbg !358
  ret void, !dbg !361
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp_outlined..8(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %max, i64 %vla, i32* dereferenceable(4) %cpos, i32** dereferenceable(8) %array, i32* dereferenceable(4) %j) #4 !dbg !362 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %max.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %cpos.addr = alloca i32*, align 8
  %array.addr = alloca i32**, align 8
  %j.addr = alloca i32*, align 8
  store i32* %.global_tid., i32** %.global_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !364, metadata !DIExpression()), !dbg !371
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !365, metadata !DIExpression()), !dbg !371
  store i32* %max, i32** %max.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %max.addr, metadata !366, metadata !DIExpression()), !dbg !371
  store i64 %vla, i64* %vla.addr, align 8, !tbaa !121
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !367, metadata !DIExpression()), !dbg !371
  store i32* %cpos, i32** %cpos.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %cpos.addr, metadata !368, metadata !DIExpression()), !dbg !371
  store i32** %array, i32*** %array.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32*** %array.addr, metadata !369, metadata !DIExpression()), !dbg !371
  store i32* %j, i32** %j.addr, align 8, !tbaa !24
  call void @llvm.dbg.declare(metadata i32** %j.addr, metadata !370, metadata !DIExpression()), !dbg !371
  %0 = load i32*, i32** %max.addr, align 8, !dbg !372, !tbaa !24
  %1 = load i64, i64* %vla.addr, align 8, !dbg !372, !tbaa !121
  %2 = load i32*, i32** %cpos.addr, align 8, !dbg !372, !tbaa !24
  %3 = load i32**, i32*** %array.addr, align 8, !dbg !372, !tbaa !24
  %4 = load i32*, i32** %j.addr, align 8, !dbg !372, !tbaa !24
  %5 = load i32*, i32** %.global_tid..addr, align 8, !dbg !372, !tbaa !24
  %6 = load i32*, i32** %.bound_tid..addr, align 8, !dbg !372, !tbaa !24
  %7 = load i32*, i32** %max.addr, align 8, !dbg !372, !tbaa !24
  %8 = load i32*, i32** %cpos.addr, align 8, !dbg !372, !tbaa !24
  %9 = load i32**, i32*** %array.addr, align 8, !dbg !372, !tbaa !24
  %10 = load i32*, i32** %j.addr, align 8, !dbg !372, !tbaa !24
  call void @.omp_outlined._debug__.7(i32* %5, i32* %6, i32* %7, i64 %1, i32* %8, i32** %9, i32* %10) #3, !dbg !372
  ret void, !dbg !372
}

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #3

; Function Attrs: nounwind uwtable
define dso_local i32 @main() #0 !dbg !373 {
entry:
  %retval = alloca i32, align 4
  %array = alloca [1000000 x i32], align 16
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %s_original = alloca double, align 8
  %s_parallel = alloca double, align 8
  %t_original = alloca double, align 8
  %t_parallel = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [1000000 x i32]* %array to i8*, !dbg !389
  call void @llvm.lifetime.start.p0i8(i64 4000000, i8* %0) #3, !dbg !389
  call void @llvm.dbg.declare(metadata [1000000 x i32]* %array, metadata !377, metadata !DIExpression()), !dbg !390
  %1 = bitcast i32* %i to i8*, !dbg !389
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #3, !dbg !389
  call void @llvm.dbg.declare(metadata i32* %i, metadata !381, metadata !DIExpression()), !dbg !391
  %2 = bitcast i32* %n to i8*, !dbg !389
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #3, !dbg !389
  call void @llvm.dbg.declare(metadata i32* %n, metadata !382, metadata !DIExpression()), !dbg !392
  store i32 1000000, i32* %n, align 4, !dbg !392, !tbaa !29
  %3 = bitcast i32* %max to i8*, !dbg !389
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #3, !dbg !389
  call void @llvm.dbg.declare(metadata i32* %max, metadata !383, metadata !DIExpression()), !dbg !393
  store i32 0, i32* %max, align 4, !dbg !393, !tbaa !29
  %4 = bitcast i32* %min to i8*, !dbg !389
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #3, !dbg !389
  call void @llvm.dbg.declare(metadata i32* %min, metadata !384, metadata !DIExpression()), !dbg !394
  store i32 0, i32* %min, align 4, !dbg !394, !tbaa !29
  %5 = bitcast double* %s_original to i8*, !dbg !395
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #3, !dbg !395
  call void @llvm.dbg.declare(metadata double* %s_original, metadata !385, metadata !DIExpression()), !dbg !396
  %6 = bitcast double* %s_parallel to i8*, !dbg !395
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #3, !dbg !395
  call void @llvm.dbg.declare(metadata double* %s_parallel, metadata !386, metadata !DIExpression()), !dbg !397
  %7 = bitcast double* %t_original to i8*, !dbg !395
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #3, !dbg !395
  call void @llvm.dbg.declare(metadata double* %t_original, metadata !387, metadata !DIExpression()), !dbg !398
  %8 = bitcast double* %t_parallel to i8*, !dbg !395
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #3, !dbg !395
  call void @llvm.dbg.declare(metadata double* %t_parallel, metadata !388, metadata !DIExpression()), !dbg !399
  %arraydecay = getelementptr inbounds [1000000 x i32], [1000000 x i32]* %array, i64 0, i64 0, !dbg !400
  %9 = load i32, i32* %n, align 4, !dbg !401, !tbaa !29
  call void @Build_Array(i32* %arraydecay, i32 %9), !dbg !402
  store i32 0, i32* %i, align 4, !dbg !403, !tbaa !29
  br label %for.cond, !dbg !405

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4, !dbg !406, !tbaa !29
  %11 = load i32, i32* %n, align 4, !dbg !408, !tbaa !29
  %cmp = icmp slt i32 %10, %11, !dbg !409
  br i1 %cmp, label %for.body, label %for.end, !dbg !410

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4, !dbg !411, !tbaa !29
  %idxprom = sext i32 %12 to i64, !dbg !414
  %arrayidx = getelementptr inbounds [1000000 x i32], [1000000 x i32]* %array, i64 0, i64 %idxprom, !dbg !414
  %13 = load i32, i32* %arrayidx, align 4, !dbg !414, !tbaa !29
  %14 = load i32, i32* %max, align 4, !dbg !415, !tbaa !29
  %cmp1 = icmp sgt i32 %13, %14, !dbg !416
  br i1 %cmp1, label %if.then, label %if.end, !dbg !417

if.then:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4, !dbg !418, !tbaa !29
  %idxprom2 = sext i32 %15 to i64, !dbg !419
  %arrayidx3 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* %array, i64 0, i64 %idxprom2, !dbg !419
  %16 = load i32, i32* %arrayidx3, align 4, !dbg !419, !tbaa !29
  store i32 %16, i32* %max, align 4, !dbg !420, !tbaa !29
  br label %if.end, !dbg !421

if.end:                                           ; preds = %if.then, %for.body
  %17 = load i32, i32* %i, align 4, !dbg !422, !tbaa !29
  %idxprom4 = sext i32 %17 to i64, !dbg !424
  %arrayidx5 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* %array, i64 0, i64 %idxprom4, !dbg !424
  %18 = load i32, i32* %arrayidx5, align 4, !dbg !424, !tbaa !29
  %19 = load i32, i32* %min, align 4, !dbg !425, !tbaa !29
  %cmp6 = icmp slt i32 %18, %19, !dbg !426
  br i1 %cmp6, label %if.then7, label %if.end10, !dbg !427

if.then7:                                         ; preds = %if.end
  %20 = load i32, i32* %i, align 4, !dbg !428, !tbaa !29
  %idxprom8 = sext i32 %20 to i64, !dbg !429
  %arrayidx9 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* %array, i64 0, i64 %idxprom8, !dbg !429
  %21 = load i32, i32* %arrayidx9, align 4, !dbg !429, !tbaa !29
  store i32 %21, i32* %min, align 4, !dbg !430, !tbaa !29
  br label %if.end10, !dbg !431

if.end10:                                         ; preds = %if.then7, %if.end
  br label %for.inc, !dbg !432

for.inc:                                          ; preds = %if.end10
  %22 = load i32, i32* %i, align 4, !dbg !433, !tbaa !29
  %inc = add nsw i32 %22, 1, !dbg !433
  store i32 %inc, i32* %i, align 4, !dbg !433, !tbaa !29
  br label %for.cond, !dbg !434, !llvm.loop !435

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %min, align 4, !dbg !437, !tbaa !29
  %cmp11 = icmp sge i32 %23, 0, !dbg !439
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !440

if.then12:                                        ; preds = %for.end
  store i32 0, i32* %min, align 4, !dbg !441, !tbaa !29
  br label %if.end13, !dbg !442

if.end13:                                         ; preds = %if.then12, %for.end
  %call = call double @omp_get_wtime(), !dbg !443
  store double %call, double* %s_parallel, align 8, !dbg !444, !tbaa !445
  %arraydecay14 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* %array, i64 0, i64 0, !dbg !447
  %24 = load i32, i32* %n, align 4, !dbg !448, !tbaa !29
  %25 = load i32, i32* %max, align 4, !dbg !449, !tbaa !29
  %26 = load i32, i32* %min, align 4, !dbg !450, !tbaa !29
  call void @Parallel_BS(i32* %arraydecay14, i32 %24, i32 %25, i32 %26), !dbg !451
  %call15 = call double @omp_get_wtime(), !dbg !452
  %27 = load double, double* %s_parallel, align 8, !dbg !453, !tbaa !445
  %sub = fsub double %call15, %27, !dbg !454
  store double %sub, double* %t_parallel, align 8, !dbg !455, !tbaa !445
  %28 = load double, double* %t_parallel, align 8, !dbg !456, !tbaa !445
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), double %28), !dbg !457
  %29 = bitcast double* %t_parallel to i8*, !dbg !458
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #3, !dbg !458
  %30 = bitcast double* %t_original to i8*, !dbg !458
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #3, !dbg !458
  %31 = bitcast double* %s_parallel to i8*, !dbg !458
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #3, !dbg !458
  %32 = bitcast double* %s_original to i8*, !dbg !458
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32) #3, !dbg !458
  %33 = bitcast i32* %min to i8*, !dbg !458
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %33) #3, !dbg !458
  %34 = bitcast i32* %max to i8*, !dbg !458
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %34) #3, !dbg !458
  %35 = bitcast i32* %n to i8*, !dbg !458
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %35) #3, !dbg !458
  %36 = bitcast i32* %i to i8*, !dbg !458
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %36) #3, !dbg !458
  %37 = bitcast [1000000 x i32]* %array to i8*, !dbg !458
  call void @llvm.lifetime.end.p0i8(i64 4000000, i8* %37) #3, !dbg !458
  ret i32 0, !dbg !459
}

declare !dbg !4 dso_local double @omp_get_wtime() #5

declare dso_local i32 @printf(i8*, ...) #5

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!9, !10, !11}
!llvm.ident = !{!12}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 (/build/classic-flang-llvm-project/clang adbc1b96af90767a7e3c9ecc983c08f96256f86d)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "parallel.c", directory: "/home/camila/Documentos/Laboratorio-1-PP")
!2 = !{}
!3 = !{!4}
!4 = !DISubprogram(name: "omp_get_wtime", scope: !5, file: !5, line: 128, type: !6, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !2)
!5 = !DIFile(filename: "coderrect-linux-hpc-1.0.0/clang/lib/clang/10.0.1/include/omp.h", directory: "/home/camila/Documentos/Laboratorio-1-PP")
!6 = !DISubroutineType(types: !7)
!7 = !{!8}
!8 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!9 = !{i32 7, !"Dwarf Version", i32 4}
!10 = !{i32 2, !"Debug Info Version", i32 3}
!11 = !{i32 1, !"wchar_size", i32 4}
!12 = !{!"clang version 10.0.1 (/build/classic-flang-llvm-project/clang adbc1b96af90767a7e3c9ecc983c08f96256f86d)"}
!13 = distinct !DISubprogram(name: "Build_Array", scope: !1, file: !1, line: 11, type: !14, scopeLine: 11, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !18)
!14 = !DISubroutineType(types: !15)
!15 = !{null, !16, !17}
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!18 = !{!19, !20, !21, !22}
!19 = !DILocalVariable(name: "array", arg: 1, scope: !13, file: !1, line: 11, type: !16)
!20 = !DILocalVariable(name: "n", arg: 2, scope: !13, file: !1, line: 11, type: !17)
!21 = !DILocalVariable(name: "max", scope: !13, file: !1, line: 12, type: !17)
!22 = !DILocalVariable(name: "i", scope: !23, file: !1, line: 13, type: !17)
!23 = distinct !DILexicalBlock(scope: !13, file: !1, line: 13, column: 5)
!24 = !{!25, !25, i64 0}
!25 = !{!"any pointer", !26, i64 0}
!26 = !{!"omnipotent char", !27, i64 0}
!27 = !{!"Simple C/C++ TBAA"}
!28 = !DILocation(line: 11, column: 22, scope: !13)
!29 = !{!30, !30, i64 0}
!30 = !{!"int", !26, i64 0}
!31 = !DILocation(line: 11, column: 35, scope: !13)
!32 = !DILocation(line: 12, column: 5, scope: !13)
!33 = !DILocation(line: 12, column: 9, scope: !13)
!34 = !DILocation(line: 13, column: 10, scope: !23)
!35 = !DILocation(line: 13, column: 14, scope: !23)
!36 = !DILocation(line: 13, column: 21, scope: !37)
!37 = distinct !DILexicalBlock(scope: !23, file: !1, line: 13, column: 5)
!38 = !DILocation(line: 13, column: 25, scope: !37)
!39 = !DILocation(line: 13, column: 23, scope: !37)
!40 = !DILocation(line: 13, column: 5, scope: !23)
!41 = !DILocation(line: 13, column: 5, scope: !37)
!42 = !DILocation(line: 14, column: 20, scope: !43)
!43 = distinct !DILexicalBlock(scope: !37, file: !1, line: 13, column: 32)
!44 = !DILocation(line: 14, column: 9, scope: !43)
!45 = !DILocation(line: 14, column: 15, scope: !43)
!46 = !DILocation(line: 14, column: 18, scope: !43)
!47 = !DILocation(line: 15, column: 12, scope: !43)
!48 = !DILocation(line: 16, column: 5, scope: !43)
!49 = !DILocation(line: 13, column: 29, scope: !37)
!50 = distinct !{!50, !40, !51}
!51 = !DILocation(line: 16, column: 5, scope: !23)
!52 = !DILocation(line: 17, column: 1, scope: !13)
!53 = distinct !DISubprogram(name: "Parallel_BS", scope: !1, file: !1, line: 20, type: !54, scopeLine: 20, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !56)
!54 = !DISubroutineType(types: !55)
!55 = !{null, !16, !17, !17, !17}
!56 = !{!57, !58, !59, !60, !61, !62, !63, !65, !69, !70}
!57 = !DILocalVariable(name: "array", arg: 1, scope: !53, file: !1, line: 20, type: !16)
!58 = !DILocalVariable(name: "n", arg: 2, scope: !53, file: !1, line: 20, type: !17)
!59 = !DILocalVariable(name: "max", arg: 3, scope: !53, file: !1, line: 20, type: !17)
!60 = !DILocalVariable(name: "min", arg: 4, scope: !53, file: !1, line: 20, type: !17)
!61 = !DILocalVariable(name: "i", scope: !53, file: !1, line: 22, type: !17)
!62 = !DILocalVariable(name: "j", scope: !53, file: !1, line: 22, type: !17)
!63 = !DILocalVariable(name: "__vla_expr0", scope: !53, type: !64, flags: DIFlagArtificial)
!64 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!65 = !DILocalVariable(name: "cpos", scope: !53, file: !1, line: 23, type: !66)
!66 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, elements: !67)
!67 = !{!68}
!68 = !DISubrange(count: !63)
!69 = !DILocalVariable(name: "__vla_expr1", scope: !53, type: !64, flags: DIFlagArtificial)
!70 = !DILocalVariable(name: "cneg", scope: !53, file: !1, line: 23, type: !71)
!71 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, elements: !72)
!72 = !{!73}
!73 = !DISubrange(count: !69)
!74 = !DILocation(line: 20, column: 22, scope: !53)
!75 = !DILocation(line: 20, column: 35, scope: !53)
!76 = !DILocation(line: 20, column: 42, scope: !53)
!77 = !DILocation(line: 20, column: 51, scope: !53)
!78 = !DILocation(line: 22, column: 5, scope: !53)
!79 = !DILocation(line: 22, column: 9, scope: !53)
!80 = !DILocation(line: 22, column: 12, scope: !53)
!81 = !DILocation(line: 23, column: 14, scope: !53)
!82 = !DILocation(line: 23, column: 17, scope: !53)
!83 = !DILocation(line: 23, column: 5, scope: !53)
!84 = !DILocation(line: 0, scope: !53)
!85 = !DILocation(line: 23, column: 9, scope: !53)
!86 = !DILocation(line: 23, column: 29, scope: !53)
!87 = !DILocation(line: 23, column: 32, scope: !53)
!88 = !DILocation(line: 23, column: 27, scope: !53)
!89 = !DILocation(line: 23, column: 22, scope: !53)
!90 = !DILocation(line: 25, column: 5, scope: !53)
!91 = !{!92, !25, i64 16}
!92 = !{!"ident_t", !30, i64 0, !30, i64 4, !30, i64 8, !30, i64 12, !25, i64 16}
!93 = !DILocation(line: 29, column: 5, scope: !53)
!94 = !DILocation(line: 33, column: 5, scope: !53)
!95 = !DILocation(line: 41, column: 5, scope: !53)
!96 = !DILocation(line: 48, column: 5, scope: !53)
!97 = !DILocation(line: 55, column: 1, scope: !53)
!98 = distinct !DISubprogram(name: ".omp_outlined._debug__", scope: !1, file: !1, line: 26, type: !99, scopeLine: 26, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !106)
!99 = !DISubroutineType(types: !100)
!100 = !{null, !101, !101, !105, !64, !105}
!101 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !102)
!102 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !103)
!103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !104, size: 64)
!104 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !17)
!105 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !17, size: 64)
!106 = !{!107, !108, !109, !110, !111, !112, !113, !113, !114, !115, !116, !117, !118, !114}
!107 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !98, type: !101, flags: DIFlagArtificial)
!108 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !98, type: !101, flags: DIFlagArtificial)
!109 = !DILocalVariable(name: "max", arg: 3, scope: !98, file: !1, line: 20, type: !105)
!110 = !DILocalVariable(name: "vla", arg: 4, scope: !98, type: !64, flags: DIFlagArtificial)
!111 = !DILocalVariable(name: "cpos", arg: 5, scope: !98, file: !1, line: 23, type: !105)
!112 = !DILocalVariable(name: ".omp.iv", scope: !98, type: !17, flags: DIFlagArtificial)
!113 = !DILocalVariable(name: ".capture_expr.", scope: !98, type: !17, flags: DIFlagArtificial)
!114 = !DILocalVariable(name: "i", scope: !98, type: !17, flags: DIFlagArtificial)
!115 = !DILocalVariable(name: ".omp.lb", scope: !98, type: !17, flags: DIFlagArtificial)
!116 = !DILocalVariable(name: ".omp.ub", scope: !98, type: !17, flags: DIFlagArtificial)
!117 = !DILocalVariable(name: ".omp.stride", scope: !98, type: !17, flags: DIFlagArtificial)
!118 = !DILocalVariable(name: ".omp.is_last", scope: !98, type: !17, flags: DIFlagArtificial)
!119 = !DILocation(line: 0, scope: !98)
!120 = !DILocation(line: 20, column: 42, scope: !98)
!121 = !{!122, !122, i64 0}
!122 = !{!"long", !26, i64 0}
!123 = !DILocation(line: 23, column: 9, scope: !98)
!124 = !DILocation(line: 26, column: 5, scope: !98)
!125 = !DILocation(line: 26, column: 22, scope: !98)
!126 = !DILocation(line: 26, column: 27, scope: !98)
!127 = !DILocation(line: 26, column: 10, scope: !98)
!128 = !DILocation(line: 27, column: 14, scope: !98)
!129 = !DILocation(line: 27, column: 9, scope: !98)
!130 = !DILocation(line: 27, column: 17, scope: !98)
!131 = !DILocation(line: 25, column: 5, scope: !98)
!132 = distinct !{!132, !131, !133}
!133 = !DILocation(line: 25, column: 29, scope: !98)
!134 = !DILocation(line: 27, column: 19, scope: !98)
!135 = distinct !DISubprogram(name: ".omp_outlined.", scope: !1, file: !1, line: 26, type: !99, scopeLine: 26, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !136)
!136 = !{!137, !138, !139, !140, !141}
!137 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !135, type: !101, flags: DIFlagArtificial)
!138 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !135, type: !101, flags: DIFlagArtificial)
!139 = !DILocalVariable(name: "max", arg: 3, scope: !135, type: !105, flags: DIFlagArtificial)
!140 = !DILocalVariable(name: "vla", arg: 4, scope: !135, type: !64, flags: DIFlagArtificial)
!141 = !DILocalVariable(name: "cpos", arg: 5, scope: !135, type: !105, flags: DIFlagArtificial)
!142 = !DILocation(line: 0, scope: !135)
!143 = !DILocation(line: 26, column: 5, scope: !135)
!144 = !{!145}
!145 = !{i64 2, i64 -1, i64 -1, i1 true}
!146 = distinct !DISubprogram(name: ".omp_outlined._debug__.1", scope: !1, file: !1, line: 30, type: !99, scopeLine: 30, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !147)
!147 = !{!148, !149, !150, !151, !152, !153, !154, !154, !155, !156, !157, !158, !159, !155}
!148 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !146, type: !101, flags: DIFlagArtificial)
!149 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !146, type: !101, flags: DIFlagArtificial)
!150 = !DILocalVariable(name: "min", arg: 3, scope: !146, file: !1, line: 20, type: !105)
!151 = !DILocalVariable(name: "vla", arg: 4, scope: !146, type: !64, flags: DIFlagArtificial)
!152 = !DILocalVariable(name: "cneg", arg: 5, scope: !146, file: !1, line: 23, type: !105)
!153 = !DILocalVariable(name: ".omp.iv", scope: !146, type: !17, flags: DIFlagArtificial)
!154 = !DILocalVariable(name: ".capture_expr.", scope: !146, type: !17, flags: DIFlagArtificial)
!155 = !DILocalVariable(name: "i", scope: !146, type: !17, flags: DIFlagArtificial)
!156 = !DILocalVariable(name: ".omp.lb", scope: !146, type: !17, flags: DIFlagArtificial)
!157 = !DILocalVariable(name: ".omp.ub", scope: !146, type: !17, flags: DIFlagArtificial)
!158 = !DILocalVariable(name: ".omp.stride", scope: !146, type: !17, flags: DIFlagArtificial)
!159 = !DILocalVariable(name: ".omp.is_last", scope: !146, type: !17, flags: DIFlagArtificial)
!160 = !DILocation(line: 0, scope: !146)
!161 = !DILocation(line: 20, column: 51, scope: !146)
!162 = !DILocation(line: 23, column: 22, scope: !146)
!163 = !DILocation(line: 30, column: 5, scope: !146)
!164 = !DILocation(line: 30, column: 24, scope: !146)
!165 = !DILocation(line: 30, column: 27, scope: !146)
!166 = !DILocation(line: 30, column: 22, scope: !146)
!167 = !DILocation(line: 30, column: 32, scope: !146)
!168 = !DILocation(line: 30, column: 10, scope: !146)
!169 = !DILocation(line: 31, column: 14, scope: !146)
!170 = !DILocation(line: 31, column: 9, scope: !146)
!171 = !DILocation(line: 31, column: 17, scope: !146)
!172 = !DILocation(line: 29, column: 5, scope: !146)
!173 = distinct !{!173, !172, !174}
!174 = !DILocation(line: 29, column: 29, scope: !146)
!175 = !DILocation(line: 31, column: 19, scope: !146)
!176 = distinct !DISubprogram(name: ".omp_outlined..2", scope: !1, file: !1, line: 30, type: !99, scopeLine: 30, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !177)
!177 = !{!178, !179, !180, !181, !182}
!178 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !176, type: !101, flags: DIFlagArtificial)
!179 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !176, type: !101, flags: DIFlagArtificial)
!180 = !DILocalVariable(name: "min", arg: 3, scope: !176, type: !105, flags: DIFlagArtificial)
!181 = !DILocalVariable(name: "vla", arg: 4, scope: !176, type: !64, flags: DIFlagArtificial)
!182 = !DILocalVariable(name: "cneg", arg: 5, scope: !176, type: !105, flags: DIFlagArtificial)
!183 = !DILocation(line: 0, scope: !176)
!184 = !DILocation(line: 30, column: 5, scope: !176)
!185 = distinct !DISubprogram(name: ".omp_outlined._debug__.3", scope: !1, file: !1, line: 34, type: !186, scopeLine: 34, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !189)
!186 = !DISubroutineType(types: !187)
!187 = !{null, !101, !101, !105, !188, !64, !105, !64, !105}
!188 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !16, size: 64)
!189 = !{!190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !199, !200, !201, !202, !203, !204, !200}
!190 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !185, type: !101, flags: DIFlagArtificial)
!191 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !185, type: !101, flags: DIFlagArtificial)
!192 = !DILocalVariable(name: "n", arg: 3, scope: !185, file: !1, line: 20, type: !105)
!193 = !DILocalVariable(name: "array", arg: 4, scope: !185, file: !1, line: 20, type: !188)
!194 = !DILocalVariable(name: "vla", arg: 5, scope: !185, type: !64, flags: DIFlagArtificial)
!195 = !DILocalVariable(name: "cpos", arg: 6, scope: !185, file: !1, line: 23, type: !105)
!196 = !DILocalVariable(name: "vla", arg: 7, scope: !185, type: !64, flags: DIFlagArtificial)
!197 = !DILocalVariable(name: "cneg", arg: 8, scope: !185, file: !1, line: 23, type: !105)
!198 = !DILocalVariable(name: ".omp.iv", scope: !185, type: !17, flags: DIFlagArtificial)
!199 = !DILocalVariable(name: ".capture_expr.", scope: !185, type: !17, flags: DIFlagArtificial)
!200 = !DILocalVariable(name: "i", scope: !185, type: !17, flags: DIFlagArtificial)
!201 = !DILocalVariable(name: ".omp.lb", scope: !185, type: !17, flags: DIFlagArtificial)
!202 = !DILocalVariable(name: ".omp.ub", scope: !185, type: !17, flags: DIFlagArtificial)
!203 = !DILocalVariable(name: ".omp.stride", scope: !185, type: !17, flags: DIFlagArtificial)
!204 = !DILocalVariable(name: ".omp.is_last", scope: !185, type: !17, flags: DIFlagArtificial)
!205 = !DILocation(line: 0, scope: !185)
!206 = !DILocation(line: 20, column: 35, scope: !185)
!207 = !DILocation(line: 20, column: 22, scope: !185)
!208 = !DILocation(line: 23, column: 9, scope: !185)
!209 = !DILocation(line: 23, column: 22, scope: !185)
!210 = !DILocation(line: 34, column: 5, scope: !185)
!211 = !DILocation(line: 34, column: 21, scope: !185)
!212 = !DILocation(line: 34, column: 24, scope: !185)
!213 = !DILocation(line: 34, column: 10, scope: !185)
!214 = !DILocation(line: 35, column: 13, scope: !215)
!215 = distinct !DILexicalBlock(scope: !216, file: !1, line: 35, column: 13)
!216 = distinct !DILexicalBlock(scope: !185, file: !1, line: 34, column: 29)
!217 = !DILocation(line: 35, column: 19, scope: !215)
!218 = !DILocation(line: 35, column: 22, scope: !215)
!219 = !DILocation(line: 35, column: 13, scope: !216)
!220 = !DILocation(line: 36, column: 19, scope: !215)
!221 = !DILocation(line: 36, column: 25, scope: !215)
!222 = !DILocation(line: 36, column: 14, scope: !215)
!223 = !DILocation(line: 36, column: 29, scope: !215)
!224 = !DILocation(line: 36, column: 13, scope: !215)
!225 = !DILocation(line: 38, column: 20, scope: !215)
!226 = !DILocation(line: 38, column: 26, scope: !215)
!227 = !DILocation(line: 38, column: 19, scope: !215)
!228 = !DILocation(line: 38, column: 14, scope: !215)
!229 = !DILocation(line: 38, column: 30, scope: !215)
!230 = !DILocation(line: 39, column: 5, scope: !216)
!231 = !DILocation(line: 33, column: 5, scope: !185)
!232 = distinct !{!232, !231, !233}
!233 = !DILocation(line: 33, column: 29, scope: !185)
!234 = !DILocation(line: 39, column: 5, scope: !185)
!235 = distinct !DISubprogram(name: ".omp_outlined..4", scope: !1, file: !1, line: 34, type: !186, scopeLine: 34, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !236)
!236 = !{!237, !238, !239, !240, !241, !242, !243, !244}
!237 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !235, type: !101, flags: DIFlagArtificial)
!238 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !235, type: !101, flags: DIFlagArtificial)
!239 = !DILocalVariable(name: "n", arg: 3, scope: !235, type: !105, flags: DIFlagArtificial)
!240 = !DILocalVariable(name: "array", arg: 4, scope: !235, type: !188, flags: DIFlagArtificial)
!241 = !DILocalVariable(name: "vla", arg: 5, scope: !235, type: !64, flags: DIFlagArtificial)
!242 = !DILocalVariable(name: "cpos", arg: 6, scope: !235, type: !105, flags: DIFlagArtificial)
!243 = !DILocalVariable(name: "vla", arg: 7, scope: !235, type: !64, flags: DIFlagArtificial)
!244 = !DILocalVariable(name: "cneg", arg: 8, scope: !235, type: !105, flags: DIFlagArtificial)
!245 = !DILocation(line: 0, scope: !235)
!246 = !DILocation(line: 34, column: 5, scope: !235)
!247 = distinct !DISubprogram(name: ".omp_outlined._debug__.5", scope: !1, file: !1, line: 42, type: !248, scopeLine: 42, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !250)
!248 = !DISubroutineType(types: !249)
!249 = !{null, !101, !101, !105, !64, !105, !188, !105}
!250 = !{!251, !252, !253, !254, !255, !256, !257, !258, !259, !259, !260, !261, !262, !263, !264, !260}
!251 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !247, type: !101, flags: DIFlagArtificial)
!252 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !247, type: !101, flags: DIFlagArtificial)
!253 = !DILocalVariable(name: "min", arg: 3, scope: !247, file: !1, line: 20, type: !105)
!254 = !DILocalVariable(name: "vla", arg: 4, scope: !247, type: !64, flags: DIFlagArtificial)
!255 = !DILocalVariable(name: "cneg", arg: 5, scope: !247, file: !1, line: 23, type: !105)
!256 = !DILocalVariable(name: "array", arg: 6, scope: !247, file: !1, line: 20, type: !188)
!257 = !DILocalVariable(name: "j", arg: 7, scope: !247, file: !1, line: 22, type: !105)
!258 = !DILocalVariable(name: ".omp.iv", scope: !247, type: !17, flags: DIFlagArtificial)
!259 = !DILocalVariable(name: ".capture_expr.", scope: !247, type: !17, flags: DIFlagArtificial)
!260 = !DILocalVariable(name: "i", scope: !247, type: !17, flags: DIFlagArtificial)
!261 = !DILocalVariable(name: ".omp.lb", scope: !247, type: !17, flags: DIFlagArtificial)
!262 = !DILocalVariable(name: ".omp.ub", scope: !247, type: !17, flags: DIFlagArtificial)
!263 = !DILocalVariable(name: ".omp.stride", scope: !247, type: !17, flags: DIFlagArtificial)
!264 = !DILocalVariable(name: ".omp.is_last", scope: !247, type: !17, flags: DIFlagArtificial)
!265 = !DILocation(line: 0, scope: !247)
!266 = !DILocation(line: 20, column: 51, scope: !247)
!267 = !DILocation(line: 23, column: 22, scope: !247)
!268 = !DILocation(line: 20, column: 22, scope: !247)
!269 = !DILocation(line: 22, column: 12, scope: !247)
!270 = !DILocation(line: 42, column: 5, scope: !247)
!271 = !DILocation(line: 42, column: 15, scope: !247)
!272 = !DILocation(line: 42, column: 14, scope: !247)
!273 = !DILocation(line: 42, column: 27, scope: !247)
!274 = !DILocation(line: 42, column: 10, scope: !247)
!275 = !DILocation(line: 43, column: 9, scope: !247)
!276 = !DILocation(line: 43, column: 21, scope: !277)
!277 = distinct !DILexicalBlock(scope: !278, file: !1, line: 43, column: 9)
!278 = distinct !DILexicalBlock(scope: !247, file: !1, line: 43, column: 9)
!279 = !DILocation(line: 43, column: 16, scope: !277)
!280 = !DILocation(line: 43, column: 24, scope: !277)
!281 = !DILocation(line: 43, column: 9, scope: !278)
!282 = !DILocation(line: 44, column: 13, scope: !283)
!283 = distinct !DILexicalBlock(scope: !277, file: !1, line: 43, column: 41)
!284 = !DILocation(line: 45, column: 27, scope: !285)
!285 = distinct !DILexicalBlock(scope: !283, file: !1, line: 44, column: 13)
!286 = !DILocation(line: 45, column: 26, scope: !285)
!287 = !DILocation(line: 45, column: 13, scope: !285)
!288 = !DILocation(line: 45, column: 20, scope: !285)
!289 = !DILocation(line: 45, column: 24, scope: !285)
!290 = !DILocation(line: 46, column: 9, scope: !283)
!291 = !DILocation(line: 43, column: 35, scope: !277)
!292 = !DILocation(line: 43, column: 30, scope: !277)
!293 = !DILocation(line: 43, column: 38, scope: !277)
!294 = !DILocation(line: 43, column: 9, scope: !277)
!295 = distinct !{!295, !281, !296}
!296 = !DILocation(line: 46, column: 9, scope: !278)
!297 = !DILocation(line: 41, column: 5, scope: !247)
!298 = distinct !{!298, !297, !299}
!299 = !DILocation(line: 41, column: 29, scope: !247)
!300 = !DILocation(line: 46, column: 9, scope: !247)
!301 = distinct !DISubprogram(name: ".omp_outlined..6", scope: !1, file: !1, line: 42, type: !248, scopeLine: 42, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !302)
!302 = !{!303, !304, !305, !306, !307, !308, !309}
!303 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !301, type: !101, flags: DIFlagArtificial)
!304 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !301, type: !101, flags: DIFlagArtificial)
!305 = !DILocalVariable(name: "min", arg: 3, scope: !301, type: !105, flags: DIFlagArtificial)
!306 = !DILocalVariable(name: "vla", arg: 4, scope: !301, type: !64, flags: DIFlagArtificial)
!307 = !DILocalVariable(name: "cneg", arg: 5, scope: !301, type: !105, flags: DIFlagArtificial)
!308 = !DILocalVariable(name: "array", arg: 6, scope: !301, type: !188, flags: DIFlagArtificial)
!309 = !DILocalVariable(name: "j", arg: 7, scope: !301, type: !105, flags: DIFlagArtificial)
!310 = !DILocation(line: 0, scope: !301)
!311 = !DILocation(line: 42, column: 5, scope: !301)
!312 = distinct !DISubprogram(name: ".omp_outlined._debug__.7", scope: !1, file: !1, line: 49, type: !248, scopeLine: 49, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !313)
!313 = !{!314, !315, !316, !317, !318, !319, !320, !321, !322, !322, !323, !324, !325, !326, !327, !323}
!314 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !312, type: !101, flags: DIFlagArtificial)
!315 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !312, type: !101, flags: DIFlagArtificial)
!316 = !DILocalVariable(name: "max", arg: 3, scope: !312, file: !1, line: 20, type: !105)
!317 = !DILocalVariable(name: "vla", arg: 4, scope: !312, type: !64, flags: DIFlagArtificial)
!318 = !DILocalVariable(name: "cpos", arg: 5, scope: !312, file: !1, line: 23, type: !105)
!319 = !DILocalVariable(name: "array", arg: 6, scope: !312, file: !1, line: 20, type: !188)
!320 = !DILocalVariable(name: "j", arg: 7, scope: !312, file: !1, line: 22, type: !105)
!321 = !DILocalVariable(name: ".omp.iv", scope: !312, type: !17, flags: DIFlagArtificial)
!322 = !DILocalVariable(name: ".capture_expr.", scope: !312, type: !17, flags: DIFlagArtificial)
!323 = !DILocalVariable(name: "i", scope: !312, type: !17, flags: DIFlagArtificial)
!324 = !DILocalVariable(name: ".omp.lb", scope: !312, type: !17, flags: DIFlagArtificial)
!325 = !DILocalVariable(name: ".omp.ub", scope: !312, type: !17, flags: DIFlagArtificial)
!326 = !DILocalVariable(name: ".omp.stride", scope: !312, type: !17, flags: DIFlagArtificial)
!327 = !DILocalVariable(name: ".omp.is_last", scope: !312, type: !17, flags: DIFlagArtificial)
!328 = !DILocation(line: 0, scope: !312)
!329 = !DILocation(line: 20, column: 42, scope: !312)
!330 = !DILocation(line: 23, column: 9, scope: !312)
!331 = !DILocation(line: 20, column: 22, scope: !312)
!332 = !DILocation(line: 22, column: 12, scope: !312)
!333 = !DILocation(line: 49, column: 5, scope: !312)
!334 = !DILocation(line: 49, column: 22, scope: !312)
!335 = !DILocation(line: 49, column: 27, scope: !312)
!336 = !DILocation(line: 49, column: 10, scope: !312)
!337 = !DILocation(line: 50, column: 9, scope: !312)
!338 = !DILocation(line: 50, column: 21, scope: !339)
!339 = distinct !DILexicalBlock(scope: !340, file: !1, line: 50, column: 9)
!340 = distinct !DILexicalBlock(scope: !312, file: !1, line: 50, column: 9)
!341 = !DILocation(line: 50, column: 16, scope: !339)
!342 = !DILocation(line: 50, column: 24, scope: !339)
!343 = !DILocation(line: 50, column: 9, scope: !340)
!344 = !DILocation(line: 51, column: 13, scope: !345)
!345 = distinct !DILexicalBlock(scope: !339, file: !1, line: 50, column: 41)
!346 = !DILocation(line: 52, column: 26, scope: !347)
!347 = distinct !DILexicalBlock(scope: !345, file: !1, line: 51, column: 13)
!348 = !DILocation(line: 52, column: 13, scope: !347)
!349 = !DILocation(line: 52, column: 20, scope: !347)
!350 = !DILocation(line: 52, column: 24, scope: !347)
!351 = !DILocation(line: 53, column: 9, scope: !345)
!352 = !DILocation(line: 50, column: 35, scope: !339)
!353 = !DILocation(line: 50, column: 30, scope: !339)
!354 = !DILocation(line: 50, column: 38, scope: !339)
!355 = !DILocation(line: 50, column: 9, scope: !339)
!356 = distinct !{!356, !343, !357}
!357 = !DILocation(line: 53, column: 9, scope: !340)
!358 = !DILocation(line: 48, column: 5, scope: !312)
!359 = distinct !{!359, !358, !360}
!360 = !DILocation(line: 48, column: 29, scope: !312)
!361 = !DILocation(line: 53, column: 9, scope: !312)
!362 = distinct !DISubprogram(name: ".omp_outlined..8", scope: !1, file: !1, line: 49, type: !248, scopeLine: 49, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !363)
!363 = !{!364, !365, !366, !367, !368, !369, !370}
!364 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !362, type: !101, flags: DIFlagArtificial)
!365 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !362, type: !101, flags: DIFlagArtificial)
!366 = !DILocalVariable(name: "max", arg: 3, scope: !362, type: !105, flags: DIFlagArtificial)
!367 = !DILocalVariable(name: "vla", arg: 4, scope: !362, type: !64, flags: DIFlagArtificial)
!368 = !DILocalVariable(name: "cpos", arg: 5, scope: !362, type: !105, flags: DIFlagArtificial)
!369 = !DILocalVariable(name: "array", arg: 6, scope: !362, type: !188, flags: DIFlagArtificial)
!370 = !DILocalVariable(name: "j", arg: 7, scope: !362, type: !105, flags: DIFlagArtificial)
!371 = !DILocation(line: 0, scope: !362)
!372 = !DILocation(line: 49, column: 5, scope: !362)
!373 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 58, type: !374, scopeLine: 58, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !376)
!374 = !DISubroutineType(types: !375)
!375 = !{!17}
!376 = !{!377, !381, !382, !383, !384, !385, !386, !387, !388}
!377 = !DILocalVariable(name: "array", scope: !373, file: !1, line: 59, type: !378)
!378 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 32000000, elements: !379)
!379 = !{!380}
!380 = !DISubrange(count: 1000000)
!381 = !DILocalVariable(name: "i", scope: !373, file: !1, line: 59, type: !17)
!382 = !DILocalVariable(name: "n", scope: !373, file: !1, line: 59, type: !17)
!383 = !DILocalVariable(name: "max", scope: !373, file: !1, line: 59, type: !17)
!384 = !DILocalVariable(name: "min", scope: !373, file: !1, line: 59, type: !17)
!385 = !DILocalVariable(name: "s_original", scope: !373, file: !1, line: 60, type: !8)
!386 = !DILocalVariable(name: "s_parallel", scope: !373, file: !1, line: 60, type: !8)
!387 = !DILocalVariable(name: "t_original", scope: !373, file: !1, line: 60, type: !8)
!388 = !DILocalVariable(name: "t_parallel", scope: !373, file: !1, line: 60, type: !8)
!389 = !DILocation(line: 59, column: 5, scope: !373)
!390 = !DILocation(line: 59, column: 9, scope: !373)
!391 = !DILocation(line: 59, column: 19, scope: !373)
!392 = !DILocation(line: 59, column: 22, scope: !373)
!393 = !DILocation(line: 59, column: 29, scope: !373)
!394 = !DILocation(line: 59, column: 38, scope: !373)
!395 = !DILocation(line: 60, column: 5, scope: !373)
!396 = !DILocation(line: 60, column: 12, scope: !373)
!397 = !DILocation(line: 60, column: 24, scope: !373)
!398 = !DILocation(line: 60, column: 36, scope: !373)
!399 = !DILocation(line: 60, column: 48, scope: !373)
!400 = !DILocation(line: 62, column: 17, scope: !373)
!401 = !DILocation(line: 62, column: 24, scope: !373)
!402 = !DILocation(line: 62, column: 5, scope: !373)
!403 = !DILocation(line: 64, column: 12, scope: !404)
!404 = distinct !DILexicalBlock(scope: !373, file: !1, line: 64, column: 5)
!405 = !DILocation(line: 64, column: 10, scope: !404)
!406 = !DILocation(line: 64, column: 17, scope: !407)
!407 = distinct !DILexicalBlock(scope: !404, file: !1, line: 64, column: 5)
!408 = !DILocation(line: 64, column: 21, scope: !407)
!409 = !DILocation(line: 64, column: 19, scope: !407)
!410 = !DILocation(line: 64, column: 5, scope: !404)
!411 = !DILocation(line: 65, column: 19, scope: !412)
!412 = distinct !DILexicalBlock(scope: !413, file: !1, line: 65, column: 13)
!413 = distinct !DILexicalBlock(scope: !407, file: !1, line: 64, column: 29)
!414 = !DILocation(line: 65, column: 13, scope: !412)
!415 = !DILocation(line: 65, column: 24, scope: !412)
!416 = !DILocation(line: 65, column: 22, scope: !412)
!417 = !DILocation(line: 65, column: 13, scope: !413)
!418 = !DILocation(line: 66, column: 25, scope: !412)
!419 = !DILocation(line: 66, column: 19, scope: !412)
!420 = !DILocation(line: 66, column: 17, scope: !412)
!421 = !DILocation(line: 66, column: 13, scope: !412)
!422 = !DILocation(line: 67, column: 19, scope: !423)
!423 = distinct !DILexicalBlock(scope: !413, file: !1, line: 67, column: 13)
!424 = !DILocation(line: 67, column: 13, scope: !423)
!425 = !DILocation(line: 67, column: 24, scope: !423)
!426 = !DILocation(line: 67, column: 22, scope: !423)
!427 = !DILocation(line: 67, column: 13, scope: !413)
!428 = !DILocation(line: 68, column: 25, scope: !423)
!429 = !DILocation(line: 68, column: 19, scope: !423)
!430 = !DILocation(line: 68, column: 17, scope: !423)
!431 = !DILocation(line: 68, column: 13, scope: !423)
!432 = !DILocation(line: 69, column: 5, scope: !413)
!433 = !DILocation(line: 64, column: 25, scope: !407)
!434 = !DILocation(line: 64, column: 5, scope: !407)
!435 = distinct !{!435, !410, !436}
!436 = !DILocation(line: 69, column: 5, scope: !404)
!437 = !DILocation(line: 71, column: 9, scope: !438)
!438 = distinct !DILexicalBlock(scope: !373, file: !1, line: 71, column: 9)
!439 = !DILocation(line: 71, column: 13, scope: !438)
!440 = !DILocation(line: 71, column: 9, scope: !373)
!441 = !DILocation(line: 72, column: 13, scope: !438)
!442 = !DILocation(line: 72, column: 9, scope: !438)
!443 = !DILocation(line: 74, column: 18, scope: !373)
!444 = !DILocation(line: 74, column: 16, scope: !373)
!445 = !{!446, !446, i64 0}
!446 = !{!"double", !26, i64 0}
!447 = !DILocation(line: 75, column: 17, scope: !373)
!448 = !DILocation(line: 75, column: 24, scope: !373)
!449 = !DILocation(line: 75, column: 27, scope: !373)
!450 = !DILocation(line: 75, column: 32, scope: !373)
!451 = !DILocation(line: 75, column: 5, scope: !373)
!452 = !DILocation(line: 76, column: 18, scope: !373)
!453 = !DILocation(line: 76, column: 36, scope: !373)
!454 = !DILocation(line: 76, column: 34, scope: !373)
!455 = !DILocation(line: 76, column: 16, scope: !373)
!456 = !DILocation(line: 77, column: 26, scope: !373)
!457 = !DILocation(line: 77, column: 5, scope: !373)
!458 = !DILocation(line: 80, column: 1, scope: !373)
!459 = !DILocation(line: 79, column: 5, scope: !373)
